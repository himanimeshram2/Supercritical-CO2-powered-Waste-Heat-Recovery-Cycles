# -*- coding: utf-8 -*-
"""Revised_Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oFncgZ_28ZrLVwdkoSNhDnpn6L09_Jin
"""

pip install coolprop

import CoolProp.CoolProp as cp
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# Define the fluids used in the cycle
fluid_cycle = "CO2"
fluid_reactor = "He"

# Define input parameters
Reactor_power = 180e6  # Thermal power of the reactor
Compressor_p_in = 7.5e6
Compressor_T_in = 33 + 273.15
Compressor_PR = 2.5  # Pressure ratio
Turbocirculator_dp = 2e5

Heater_T_in_hot = 750 + 273.15
Heater_T_out_hot = 325 + 273.15
Heater_p_hot = 6e6

# Define optimizable variables
dT_reboiler = 25.0  # Temperature difference between steam and CO2 (540+25=565)
dT_heater = 10.0  # Temperature difference between He and CO2

Reboiler_water_T = 200. + 273.15
Reboiler_steam_T = 540. + 273.15
Reboiler_p = 13.8e6
Reboiler_fr = 64.0

Compressor_eff = 0.8
Turbocirculator_eff = 0.8
Reboiler_eff = 0.95
Heater_eff = 0.9
Rec_eff = 0.95
Eco_eff = 0.95

# Initialize a DataFrame to store results
results_df = pd.DataFrame(columns=[
    "Reactor m He", "Compressor T out", "Turbocirculator T out",
    "Turbocirculator input [MW]", "Heater 2 T in", "Heater 2 T out",
    "Heater 2 m_CO2", "Heater 2 power [MW]", "Reboiler power [MW]",
    "Reboiler T_sat [Â°C]", "Reboiler m_CO2", "Reboiler T in", "Reboiler T out",
    "Iteration", "T_heater_in", "Error", "Heater T in", "Heater T out",
    "Heater m_CO2 (total)", "Flow rate ratio", "Compressor power [MW]",
    "Turbine power [MW]", "Turbine in temp", "Turbine out temp",
    "Recuperator flow rate hot", "Recuperator flow rate cold",
    "Recuperator hot side T in", "Recuperator hot side T out",
    "Recuperator cold side T in", "Recuperator cold side T out",
    "Economizer flow rate hot", "Economizer flow rate cold",
    "Economizer hot side T in", "Economizer hot side T out",
    "Economizer cold side T in", "Economizer cold side T out",
    "Mixture T in1", "Mixture T in2", "Mixture T out", "Cooler power [MW]",
    "Combined efficiency", "Cycle efficiency"
])

# Function to calculate thermodynamic properties
def calc_geminy(dT_reboiler, dT_heater, Compressor_PR, Turbine_eff, Compressor_eff, Reboiler_eff, Heater_eff, Rec_eff, Eco_eff):
    # Reactor enthalpy calculations
    Reactor_h_i = cp.PropsSI('H', 'T', Heater_T_in_hot, 'P', Heater_p_hot, fluid_reactor)
    Reactor_h_o = cp.PropsSI('H', 'T', Heater_T_out_hot, 'P', Heater_p_hot, fluid_reactor)
    Reactor_fr = Reactor_power / (Reactor_h_i - Reactor_h_o)

    # Compressor calculations
    Compressor_p_out = Compressor_p_in * Compressor_PR
    Compressor_h_in = cp.PropsSI('H', 'T', Compressor_T_in, 'P', Compressor_p_in, fluid_cycle)
    Compressor_s_in = cp.PropsSI('S', 'T', Compressor_T_in, 'P', Compressor_p_in, fluid_cycle)
    Compressor_h_out_id = cp.PropsSI('H', 'S', Compressor_s_in, 'P', Compressor_p_out, fluid_cycle)
    Compressor_h_out = Compressor_h_in + (Compressor_h_out_id - Compressor_h_in) / Compressor_eff
    Compressor_T_out = cp.PropsSI('T', 'H', Compressor_h_out, 'P', Compressor_p_out, fluid_cycle)

    # Turbocirculator calculations
    Turbocirculator_p_out = Compressor_p_in + Turbocirculator_dp
    Turbocirculator_h_in = cp.PropsSI('H', 'T', Compressor_T_in, 'P', Compressor_p_in, fluid_cycle)
    Turbocirculator_s_in = cp.PropsSI('S', 'T', Compressor_T_in, 'P', Compressor_p_in, fluid_cycle)
    Turbocirculator_h_out_id = cp.PropsSI('H', 'S', Turbocirculator_s_in, 'P', Turbocirculator_p_out, fluid_cycle)
    Turbocirculator_h_out = Turbocirculator_h_in + (Turbocirculator_h_out_id - Turbocirculator_h_in) / Turbocirculator_eff
    Turbocirculator_T_out = cp.PropsSI('T', 'H', Turbocirculator_h_out, 'P', Turbocirculator_p_out, fluid_cycle)

    # Reboiler calculations
    Reboiler_T_sat = cp.PropsSI('T', 'Q', 0., 'P', Reboiler_p, "H2O")
    Reboiler_h_in = cp.PropsSI('H', 'T', Reboiler_water_T, 'P', Reboiler_p, "H2O")
    Reboiler_h_out = cp.PropsSI('H', 'T', Reboiler_steam_T, 'P', Reboiler_p, "H2O")
    Reboiler_power = (Reboiler_h_out - Reboiler_h_in) * Reboiler_fr

    # Heater 2 calculations
    Heater_2_T_out_cold = Reboiler_steam_T + dT_reboiler
    Heater_2_h_out_cold = cp.PropsSI('H', 'T', Heater_2_T_out_cold, 'P', Turbocirculator_p_out, fluid_cycle)
    if Heater_2_T_out_cold > Heater_T_in_hot - 5:
        return np.nan, np.nan, np.nan

    Reboiler_h_out_hot_id = cp.PropsSI('H', 'T', Reboiler_water_T, 'P', Compressor_p_in, fluid_cycle)
    Reboiler_h_in_hot = Heater_2_h_out_cold
    Reboiler_T_in_hot = cp.PropsSI('T', 'H', Reboiler_h_in_hot, 'P', Turbocirculator_p_out, fluid_cycle)
    Reboiler_dh = (Reboiler_h_in_hot - Reboiler_h_out_hot_id) * Reboiler_eff
    Reboiler_h_out_hot = Reboiler_h_in_hot - Reboiler_dh
    Reboiler_T_out_hot = cp.PropsSI('T', 'H', Reboiler_h_out_hot, 'P', Compressor_p_in, fluid_cycle)
    Reboiler_CO2_fr = Reboiler_power / Reboiler_dh

    # Economizer calculations
    Eco_h_in_hot = Reboiler_h_out_hot
    Eco_T_in_hot = Reboiler_T_out_hot
    Eco_h_out_hot_id = cp.PropsSI('H', 'T', Turbocirculator_T_out, 'P', Compressor_p_in, fluid_cycle)
    Eco_dh = (Eco_h_in_hot - Eco_h_out_hot_id) * Eco_eff
    Eco_h_out_hot = Eco_h_in_hot - Eco_dh
    Eco_T_out_hot = cp.PropsSI('T', 'H', Eco_h_out_hot, 'P', Compressor_p_in, fluid_cycle)
    Eco_h_out_cold = Turbocirculator_h_out + Eco_dh
    Eco_T_out_cold = cp.PropsSI('T', 'H', Eco_h_out_cold, 'P', Turbocirculator_p_out, fluid_cycle)
    if Eco_T_in_hot < Eco_T_out_cold + 5:
        return np.nan, np.nan, np.nan

    Heater_2_h_in_cold = Eco_h_out_cold
    Heater_2_T_in_cold = Eco_T_out_cold
    Heater_2_power = (Heater_2_h_out_cold - Heater_2_h_in_cold) * Reboiler_CO2_fr

    Turbocirculator_power = (Turbocirculator_h_out - Turbocirculator_h_in) * Reboiler_CO2_fr

    dT_heater_1_in = 50.
    Heater_1_T_in_cold = Heater_T_out_hot - dT_heater_1_in  # Initial guess

    max_dT_error = 1e-3
    dT_error = 1e6
    iteration = 0
    while dT_error > max_dT_error:
        Heater_1_power = Reactor_power - Heater_2_power
        Heater_1_T_out_cold = Heater_T_in_hot - dT_heater
        Heater_1_h_out_cold = cp.PropsSI('H', 'T', Heater_1_T_out_cold, 'P', Compressor_p_out, fluid_cycle)
        Heater_1_h_in_cold = cp.PropsSI('H', 'T', Heater_1_T_in_cold, 'P', Compressor_p_out, fluid_cycle)
        Heater_1_dh = (Heater_1_h_out_cold - Heater_1_h_in_cold)

        Turbine_fr = Heater_1_power / Heater_1_dh
        m_co2_total = Turbine_fr + Reboiler_CO2_fr

        Compressor_power = (Compressor_h_out - Compressor_h_in) * Turbine_fr

        FR_ratio = Reboiler_CO2_fr / m_co2_total

        Turbine_h_in = Heater_1_h_out_cold
        Turbine_s_in = cp.PropsSI('S', 'H', Turbine_h_in, 'P', Compressor_p_out, fluid_cycle)
        Turbine_h_out_id = cp.PropsSI('H', 'S', Turbine_s_in, 'P', Compressor_p_in, fluid_cycle)
        Turbine_h_out = Turbine_h_in - (Turbine_h_in - Turbine_h_out_id) * Turbine_eff
        Turbine_T_out = cp.PropsSI('T', 'H', Turbine_h_out, 'P', Compressor_p_in, fluid_cycle)
        Turbine_power = Turbine_fr * (Turbine_h_in - Turbine_h_out)

        Rec_h_out_hot_id = cp.PropsSI('H', 'T', Compressor_T_out, 'P', Compressor_p_in, fluid_cycle)
        Rec_h_out_hot = Turbine_h_out - (Turbine_h_out - Rec_h_out_hot_id) * Rec_eff
        Rec_T_out_hot = cp.PropsSI('T', 'H', Rec_h_out_hot, 'P', Compressor_p_in, fluid_cycle)
        Rec_dh = Turbine_h_out - Rec_h_out_hot
        Rec_power = Turbine_fr * Rec_dh
        Rec_h_out_cold = Compressor_h_out + Rec_dh
        Rec_T_out_cold = cp.PropsSI('T', 'H', Rec_h_out_cold, 'P', Compressor_p_out, fluid_cycle)
        if Turbine_T_out < Rec_T_out_cold + 5:
            return np.nan, np.nan, np.nan

        mix_h = (Rec_h_out_hot * Turbine_fr + Eco_h_out_hot * Reboiler_CO2_fr) / m_co2_total
        mix_T = cp.PropsSI('T', 'H', mix_h, 'P', Compressor_p_in, fluid_cycle)

        Cooler_h_in = mix_h
        Cooler_h_out = Compressor_h_in
        Cooler_power = (Cooler_h_in - Cooler_h_out) * m_co2_total

        eff_comb = (Reactor_power - Cooler_power) / Reactor_power
        eff_cycle = (Turbine_power - Compressor_power) / Heater_1_power

        dT_error = abs(Heater_1_T_in_cold - Rec_T_out_cold)
        iteration += 1

        results_df.loc[len(results_df)] = [
            Reactor_fr, Compressor_T_out - 273.15, Turbocirculator_T_out - 273.15,
            Turbocirculator_power / 1e6, Heater_2_T_in_cold - 273.15, Heater_2_T_out_cold - 273.15,
            Reboiler_CO2_fr, Heater_2_power / 1e6, Reboiler_power / 1e6, Reboiler_T_sat - 273.15,
            Reboiler_CO2_fr, Reboiler_T_in_hot - 273.15, Reboiler_T_out_hot - 273.15, iteration,
            Heater_1_T_in_cold - 273.15, dT_error, Heater_1_T_in_cold - 273.15,
            Heater_1_T_out_cold - 273.15, m_co2_total, FR_ratio, Compressor_power / 1e6,
            Turbine_power / 1e6, Reboiler_T_in_hot - 273.15, Turbine_T_out - 273.15,
            Turbine_fr, Turbine_fr, Turbine_T_out - 273.15, Rec_T_out_hot - 273.15,
            Compressor_T_out - 273.15, Rec_T_out_cold - 273.15, Reboiler_CO2_fr,
            Reboiler_CO2_fr, Reboiler_T_out_hot - 273.15, Eco_T_out_hot - 273.15,
            Turbocirculator_T_out - 273.15, Eco_T_out_cold - 273.15, Rec_T_out_hot - 273.15,
            Eco_T_out_hot - 273.15, mix_T - 273.15, Cooler_power / 1e6, eff_comb * 100, eff_cycle * 100
        ]

        Heater_1_T_in_cold = Rec_T_out_cold

    power_net = Turbine_power - Compressor_power

    return Turbine_power, eff_cycle, power_net

# Iterate over turbine efficiency values and calculate thermal efficiency
turbine_efficiencies = np.linspace(0.5, 1.0, 11)
thermal_efficiencies = []

# Iterate over compressor efficiency values and calculate thermal efficiency
compressor_efficiencies = np.linspace(0.7, 1.0, 7)
comp_eff_thermal_efficiencies = []

for eff in turbine_efficiencies:
    _, eff_cycle, _ = calc_geminy(dT_reboiler, dT_heater, Compressor_PR, eff, Compressor_eff, Reboiler_eff, Heater_eff, Rec_eff, Eco_eff)
    thermal_efficiencies.append(eff_cycle)

for eff in compressor_efficiencies:
    _, eff_cycle, _ = calc_geminy(dT_reboiler, dT_heater, Compressor_PR, turbine_efficiencies[0], eff, Reboiler_eff, Heater_eff, Rec_eff, Eco_eff)
    comp_eff_thermal_efficiencies.append(eff_cycle)

# Display the results in a table format
pd.set_option('display.max_columns', None)
print(results_df)

# Plot the results for turbine efficiency
fig, ax = plt.subplots()
ax.plot(turbine_efficiencies, thermal_efficiencies, marker='o', linestyle='-', color='b')
ax.set_xlabel('Turbine Efficiency')
ax.set_ylabel('Thermal Efficiency of the Cycle')
ax.set_title('Effect of Turbine Efficiency on Thermal Efficiency of the Cycle')
ax.grid(True)

# Customize plot appearance
ax.xaxis.label.set_size(14)
ax.yaxis.label.set_size(14)
ax.title.set_size(16)
ax.tick_params(axis='both', which='major', labelsize=12)
ax.tick_params(axis='both', which='minor', labelsize=10)

plt.show()

# Plot the results for compressor efficiency
fig, ax = plt.subplots()
ax.plot(compressor_efficiencies, comp_eff_thermal_efficiencies, marker='o', linestyle='-', color='g')
ax.set_xlabel('Compressor Efficiency')
ax.set_ylabel('Thermal Efficiency of the Cycle')
ax.set_title('Effect of Compressor Efficiency on Thermal Efficiency of the Cycle')
ax.grid(True)

# Customize plot appearance
ax.xaxis.label.set_size(14)
ax.yaxis.label.set_size(14)
ax.title.set_size(16)
ax.tick_params(axis='both', which='major', labelsize=12)
ax.tick_params(axis='both', which='minor', labelsize=10)

plt.show()

# Additional calculations and plots for varying dT_heater and dT_reboiler
dT_heater_ls = np.linspace(10, 200, 20)
dT_reboiler_ls = np.linspace(25, 200, 40)

dT_heater_arr, dT_reboiler_arr = np.meshgrid(dT_heater_ls, dT_reboiler_ls)

Turbine_power_arr = np.zeros_like(dT_heater_arr)
eff_cycle_arr = np.zeros_like(dT_heater_arr)
power_net_arr = np.zeros_like(dT_heater_arr)

shape = dT_heater_arr.shape

for i in range(shape[0]):
    for j in range(shape[1]):
        Turbine_power_arr[i, j], eff_cycle_arr[i, j], power_net_arr[i, j] = calc_geminy(
            dT_reboiler_arr[i, j],
            dT_heater_arr[i, j],
            Compressor_PR,
            turbine_efficiencies[0],  # Use a fixed turbine efficiency for this calculation
            Compressor_eff,
            Reboiler_eff,
            Heater_eff,
            Rec_eff,
            Eco_eff
        )

plt.figure("power")
plt.contourf(Heater_T_in_hot - dT_heater_ls - 273.15,
             Reboiler_steam_T + dT_reboiler_ls - 273.15,
             Turbine_power_arr / 1e6, 50, cmap=plt.cm.jet)
cb = plt.colorbar()
cb.set_label("Turbine power [MW]")
plt.xlabel("Turbine inlet temperature [Â°C]")
plt.ylabel("Reboiler CO2 inlet temperature [Â°C]")

plt.figure("eff")
plt.contourf(Heater_T_in_hot - dT_heater_ls - 273.15,
             Reboiler_steam_T + dT_reboiler_ls - 273.15,
             eff_cycle_arr * 1e2, 50, cmap=plt.cm.jet)
cb = plt.colorbar()
cb.set_label("Power cycle efficiency [%]")
plt.xlabel("Turbine inlet temperature [Â°C]")
plt.ylabel("Reboiler CO2 inlet temperature [Â°C]")

plt.figure("net")
plt.contourf(Heater_T_in_hot - dT_heater_ls - 273.15,
             Reboiler_steam_T + dT_reboiler_ls - 273.15,
             power_net_arr / 1e6, 50, cmap=plt.cm.jet)
cb = plt.colorbar()
cb.set_label("Net power [MW]")
plt.xlabel("Turbine inlet temperature [Â°C]")
plt.ylabel("Reboiler CO2 inlet temperature [Â°C]")

# Additional calculations and plots for varying Compressor PR and dT_reboiler
PR_ls = np.linspace(2, 4, 20)
dT_reboiler_ls = np.linspace(25, 200, 40)

PR_arr, dT_reboiler_arr = np.meshgrid(PR_ls, dT_reboiler_ls)

Turbine_power_arr = np.zeros_like(PR_arr)
eff_cycle_arr = np.zeros_like(PR_arr)
power_net_arr = np.zeros_like(PR_arr)

shape = PR_arr.shape

for i in range(shape[0]):
    for j in range(shape[1]):
        Turbine_power_arr[i, j], eff_cycle_arr[i, j], power_net_arr[i, j] = calc_geminy(
            dT_reboiler_arr[i, j],
            10.,
            PR_arr[i, j],
            turbine_efficiencies[0],  # Use a fixed turbine efficiency for this calculation
            Compressor_eff,
            Reboiler_eff,
            Heater_eff,
            Rec_eff,
            Eco_eff
        )

plt.figure("power_pr")
plt.contourf(PR_ls,
             Reboiler_steam_T + dT_reboiler_ls - 273.15,
             Turbine_power_arr / 1e6, 50, cmap=plt.cm.jet)
cb = plt.colorbar()
cb.set_label("Turbine power [MW]")
plt.xlabel("Compressor pressure ratio [-]")
plt.ylabel("Reboiler CO2 inlet temperature [Â°C]")

plt.figure("eff_pr")
plt.contourf(PR_ls,
             Reboiler_steam_T + dT_reboiler_ls - 273.15,
             eff_cycle_arr * 1e2, 50, cmap=plt.cm.jet)
cb = plt.colorbar()
cb.set_label("Power cycle efficiency [%]")
plt.xlabel("Compressor pressure ratio [-]")
plt.ylabel("Reboiler CO2 inlet temperature [Â°C]")

plt.figure("net_pr")
plt.contourf(PR_ls,
             Reboiler_steam_T + dT_reboiler_ls - 273.15,
             power_net_arr / 1e6, 50, cmap=plt.cm.jet)
cb = plt.colorbar()
cb.set_label("Net power [MW]")
plt.xlabel("Compressor pressure ratio [-]")
plt.ylabel("Reboiler CO2 inlet temperature [Â°C]")

plt.show()

# dpi set to 600 in the below figures

import CoolProp.CoolProp as cp
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# Define the fluids used in the cycle
fluid_cycle = "CO2"
fluid_reactor = "He"

# Define input parameters
Reactor_power = 180e6  # Thermal power of the reactor
Compressor_p_in = 7.5e6
Compressor_T_in = 33 + 273.15
Compressor_PR = 2.5  # Pressure ratio
Turbocirculator_dp = 2e5

Heater_T_in_hot = 750 + 273.15
Heater_T_out_hot = 325 + 273.15
Heater_p_hot = 6e6

# Define optimizable variables
dT_reboiler = 25.0  # Temperature difference between steam and CO2 (540+25=565)
dT_heater = 10.0  # Temperature difference between He and CO2

Reboiler_water_T = 200. + 273.15
Reboiler_steam_T = 540. + 273.15
Reboiler_p = 13.8e6
Reboiler_fr = 64.0

Compressor_eff = 0.8
Turbocirculator_eff = 0.8
Reboiler_eff = 0.95
Heater_eff = 0.9
Rec_eff = 0.95
Eco_eff = 0.95

# Initialize a DataFrame to store results
results_df = pd.DataFrame(columns=[
    "Reactor m He", "Compressor T out", "Turbocirculator T out",
    "Turbocirculator input [MW]", "Heater 2 T in", "Heater 2 T out",
    "Heater 2 m_CO2", "Heater 2 power [MW]", "Reboiler power [MW]",
    "Reboiler T_sat [Â°C]", "Reboiler m_CO2", "Reboiler T in", "Reboiler T out",
    "Iteration", "T_heater_in", "Error", "Heater T in", "Heater T out",
    "Heater m_CO2 (total)", "Flow rate ratio", "Compressor power [MW]",
    "Turbine power [MW]", "Turbine in temp", "Turbine out temp",
    "Recuperator flow rate hot", "Recuperator flow rate cold",
    "Recuperator hot side T in", "Recuperator hot side T out",
    "Recuperator cold side T in", "Recuperator cold side T out",
    "Economizer flow rate hot", "Economizer flow rate cold",
    "Economizer hot side T in", "Economizer hot side T out",
    "Economizer cold side T in", "Economizer cold side T out",
    "Mixture T in1", "Mixture T in2", "Mixture T out", "Cooler power [MW]",
    "Combined efficiency", "Cycle efficiency"
])

# Function to calculate thermodynamic properties
def calc_geminy(dT_reboiler, dT_heater, Compressor_PR, Turbine_eff, Compressor_eff, Reboiler_eff, Heater_eff, Rec_eff, Eco_eff):
    # Reactor enthalpy calculations
    Reactor_h_i = cp.PropsSI('H', 'T', Heater_T_in_hot, 'P', Heater_p_hot, fluid_reactor)
    Reactor_h_o = cp.PropsSI('H', 'T', Heater_T_out_hot, 'P', Heater_p_hot, fluid_reactor)
    Reactor_fr = Reactor_power / (Reactor_h_i - Reactor_h_o)

    # Compressor calculations
    Compressor_p_out = Compressor_p_in * Compressor_PR
    Compressor_h_in = cp.PropsSI('H', 'T', Compressor_T_in, 'P', Compressor_p_in, fluid_cycle)
    Compressor_s_in = cp.PropsSI('S', 'T', Compressor_T_in, 'P', Compressor_p_in, fluid_cycle)
    Compressor_h_out_id = cp.PropsSI('H', 'S', Compressor_s_in, 'P', Compressor_p_out, fluid_cycle)
    Compressor_h_out = Compressor_h_in + (Compressor_h_out_id - Compressor_h_in) / Compressor_eff
    Compressor_T_out = cp.PropsSI('T', 'H', Compressor_h_out, 'P', Compressor_p_out, fluid_cycle)

    # Turbocirculator calculations
    Turbocirculator_p_out = Compressor_p_in + Turbocirculator_dp
    Turbocirculator_h_in = cp.PropsSI('H', 'T', Compressor_T_in, 'P', Compressor_p_in, fluid_cycle)
    Turbocirculator_s_in = cp.PropsSI('S', 'T', Compressor_T_in, 'P', Compressor_p_in, fluid_cycle)
    Turbocirculator_h_out_id = cp.PropsSI('H', 'S', Turbocirculator_s_in, 'P', Turbocirculator_p_out, fluid_cycle)
    Turbocirculator_h_out = Turbocirculator_h_in + (Turbocirculator_h_out_id - Turbocirculator_h_in) / Turbocirculator_eff
    Turbocirculator_T_out = cp.PropsSI('T', 'H', Turbocirculator_h_out, 'P', Turbocirculator_p_out, fluid_cycle)

    # Reboiler calculations
    Reboiler_T_sat = cp.PropsSI('T', 'Q', 0., 'P', Reboiler_p, "H2O")
    Reboiler_h_in = cp.PropsSI('H', 'T', Reboiler_water_T, 'P', Reboiler_p, "H2O")
    Reboiler_h_out = cp.PropsSI('H', 'T', Reboiler_steam_T, 'P', Reboiler_p, "H2O")
    Reboiler_power = (Reboiler_h_out - Reboiler_h_in) * Reboiler_fr

    # Heater 2 calculations
    Heater_2_T_out_cold = Reboiler_steam_T + dT_reboiler
    Heater_2_h_out_cold = cp.PropsSI('H', 'T', Heater_2_T_out_cold, 'P', Turbocirculator_p_out, fluid_cycle)
    if Heater_2_T_out_cold > Heater_T_in_hot - 5:
        return np.nan, np.nan, np.nan

    Reboiler_h_out_hot_id = cp.PropsSI('H', 'T', Reboiler_water_T, 'P', Compressor_p_in, fluid_cycle)
    Reboiler_h_in_hot = Heater_2_h_out_cold
    Reboiler_T_in_hot = cp.PropsSI('T', 'H', Reboiler_h_in_hot, 'P', Turbocirculator_p_out, fluid_cycle)
    Reboiler_dh = (Reboiler_h_in_hot - Reboiler_h_out_hot_id) * Reboiler_eff
    Reboiler_h_out_hot = Reboiler_h_in_hot - Reboiler_dh
    Reboiler_T_out_hot = cp.PropsSI('T', 'H', Reboiler_h_out_hot, 'P', Compressor_p_in, fluid_cycle)
    Reboiler_CO2_fr = Reboiler_power / Reboiler_dh

    # Economizer calculations
    Eco_h_in_hot = Reboiler_h_out_hot
    Eco_T_in_hot = Reboiler_T_out_hot
    Eco_h_out_hot_id = cp.PropsSI('H', 'T', Turbocirculator_T_out, 'P', Compressor_p_in, fluid_cycle)
    Eco_dh = (Eco_h_in_hot - Eco_h_out_hot_id) * Eco_eff
    Eco_h_out_hot = Eco_h_in_hot - Eco_dh
    Eco_T_out_hot = cp.PropsSI('T', 'H', Eco_h_out_hot, 'P', Compressor_p_in, fluid_cycle)
    Eco_h_out_cold = Turbocirculator_h_out + Eco_dh
    Eco_T_out_cold = cp.PropsSI('T', 'H', Eco_h_out_cold, 'P', Turbocirculator_p_out, fluid_cycle)
    if Eco_T_in_hot < Eco_T_out_cold + 5:
        return np.nan, np.nan, np.nan

    Heater_2_h_in_cold = Eco_h_out_cold
    Heater_2_T_in_cold = Eco_T_out_cold
    Heater_2_power = (Heater_2_h_out_cold - Heater_2_h_in_cold) * Reboiler_CO2_fr

    Turbocirculator_power = (Turbocirculator_h_out - Turbocirculator_h_in) * Reboiler_CO2_fr

    dT_heater_1_in = 50.
    Heater_1_T_in_cold = Heater_T_out_hot - dT_heater_1_in  # Initial guess

    max_dT_error = 1e-3
    dT_error = 1e6
    iteration = 0
    while dT_error > max_dT_error:
        Heater_1_power = Reactor_power - Heater_2_power
        Heater_1_T_out_cold = Heater_T_in_hot - dT_heater
        Heater_1_h_out_cold = cp.PropsSI('H', 'T', Heater_1_T_out_cold, 'P', Compressor_p_out, fluid_cycle)
        Heater_1_h_in_cold = cp.PropsSI('H', 'T', Heater_1_T_in_cold, 'P', Compressor_p_out, fluid_cycle)
        Heater_1_dh = (Heater_1_h_out_cold - Heater_1_h_in_cold)

        Turbine_fr = Heater_1_power / Heater_1_dh
        m_co2_total = Turbine_fr + Reboiler_CO2_fr

        Compressor_power = (Compressor_h_out - Compressor_h_in) * Turbine_fr

        FR_ratio = Reboiler_CO2_fr / m_co2_total

        Turbine_h_in = Heater_1_h_out_cold
        Turbine_s_in = cp.PropsSI('S', 'H', Turbine_h_in, 'P', Compressor_p_out, fluid_cycle)
        Turbine_h_out_id = cp.PropsSI('H', 'S', Turbine_s_in, 'P', Compressor_p_in, fluid_cycle)
        Turbine_h_out = Turbine_h_in - (Turbine_h_in - Turbine_h_out_id) * Turbine_eff
        Turbine_T_out = cp.PropsSI('T', 'H', Turbine_h_out, 'P', Compressor_p_in, fluid_cycle)
        Turbine_power = Turbine_fr * (Turbine_h_in - Turbine_h_out)

        Rec_h_out_hot_id = cp.PropsSI('H', 'T', Compressor_T_out, 'P', Compressor_p_in, fluid_cycle)
        Rec_h_out_hot = Turbine_h_out - (Turbine_h_out - Rec_h_out_hot_id) * Rec_eff
        Rec_T_out_hot = cp.PropsSI('T', 'H', Rec_h_out_hot, 'P', Compressor_p_in, fluid_cycle)
        Rec_dh = Turbine_h_out - Rec_h_out_hot
        Rec_power = Turbine_fr * Rec_dh
        Rec_h_out_cold = Compressor_h_out + Rec_dh
        Rec_T_out_cold = cp.PropsSI('T', 'H', Rec_h_out_cold, 'P', Compressor_p_out, fluid_cycle)
        if Turbine_T_out < Rec_T_out_cold + 5:
            return np.nan, np.nan, np.nan

        mix_h = (Rec_h_out_hot * Turbine_fr + Eco_h_out_hot * Reboiler_CO2_fr) / m_co2_total
        mix_T = cp.PropsSI('T', 'H', mix_h, 'P', Compressor_p_in, fluid_cycle)

        Cooler_h_in = mix_h
        Cooler_h_out = Compressor_h_in
        Cooler_power = (Cooler_h_in - Cooler_h_out) * m_co2_total

        eff_comb = (Reactor_power - Cooler_power) / Reactor_power
        eff_cycle = (Turbine_power - Compressor_power) / Heater_1_power

        dT_error = abs(Heater_1_T_in_cold - Rec_T_out_cold)
        iteration += 1

        results_df.loc[len(results_df)] = [
            Reactor_fr, Compressor_T_out - 273.15, Turbocirculator_T_out - 273.15,
            Turbocirculator_power / 1e6, Heater_2_T_in_cold - 273.15, Heater_2_T_out_cold - 273.15,
            Reboiler_CO2_fr, Heater_2_power / 1e6, Reboiler_power / 1e6, Reboiler_T_sat - 273.15,
            Reboiler_CO2_fr, Reboiler_T_in_hot - 273.15, Reboiler_T_out_hot - 273.15, iteration,
            Heater_1_T_in_cold - 273.15, dT_error, Heater_1_T_in_cold - 273.15,
            Heater_1_T_out_cold - 273.15, m_co2_total, FR_ratio, Compressor_power / 1e6,
            Turbine_power / 1e6, Reboiler_T_in_hot - 273.15, Turbine_T_out - 273.15,
            Turbine_fr, Turbine_fr, Turbine_T_out - 273.15, Rec_T_out_hot - 273.15,
            Compressor_T_out - 273.15, Rec_T_out_cold - 273.15, Reboiler_CO2_fr,
            Reboiler_CO2_fr, Reboiler_T_out_hot - 273.15, Eco_T_out_hot - 273.15,
            Turbocirculator_T_out - 273.15, Eco_T_out_cold - 273.15, Rec_T_out_hot - 273.15,
            Eco_T_out_hot - 273.15, mix_T - 273.15, Cooler_power / 1e6, eff_comb * 100, eff_cycle * 100
        ]

        Heater_1_T_in_cold = Rec_T_out_cold

    power_net = Turbine_power - Compressor_power

    return Turbine_power, eff_cycle, power_net

# Iterate over turbine efficiency values and calculate thermal efficiency
turbine_efficiencies = np.linspace(0.5, 1.0, 11)
thermal_efficiencies = []

# Iterate over compressor efficiency values and calculate thermal efficiency
compressor_efficiencies = np.linspace(0.7, 1.0, 7)
comp_eff_thermal_efficiencies = []

for eff in turbine_efficiencies:
    _, eff_cycle, _ = calc_geminy(dT_reboiler, dT_heater, Compressor_PR, eff, Compressor_eff, Reboiler_eff, Heater_eff, Rec_eff, Eco_eff)
    thermal_efficiencies.append(eff_cycle)

for eff in compressor_efficiencies:
    _, eff_cycle, _ = calc_geminy(dT_reboiler, dT_heater, Compressor_PR, turbine_efficiencies[0], eff, Reboiler_eff, Heater_eff, Rec_eff, Eco_eff)
    comp_eff_thermal_efficiencies.append(eff_cycle)

# Display the results in a table format
pd.set_option('display.max_columns', None)
print(results_df)

# Plot the results for turbine efficiency
fig, ax = plt.subplots(figsize=(8, 6), dpi=600)
ax.plot(turbine_efficiencies, thermal_efficiencies, marker='o', linestyle='-', color='b')
ax.set_xlabel('Turbine Efficiency')
ax.set_ylabel('Thermal Efficiency of the Cycle')
ax.set_title('Effect of Turbine Efficiency on Thermal Efficiency of the Cycle')
ax.grid(True)

# Customize plot appearance
ax.xaxis.label.set_size(14)
ax.yaxis.label.set_size(14)
ax.title.set_size(16)
ax.tick_params(axis='both', which='major', labelsize=12)
ax.tick_params(axis='both', which='minor', labelsize=10)

plt.legend(['Thermal Efficiency'])
plt.show()

# Plot the results for compressor efficiency
fig, ax = plt.subplots(figsize=(8, 6), dpi=600)
ax.plot(compressor_efficiencies, comp_eff_thermal_efficiencies, marker='o', linestyle='-', color='g')
ax.set_xlabel('Compressor Efficiency')
ax.set_ylabel('Thermal Efficiency of the Cycle')
ax.set_title('Effect of Compressor Efficiency on Thermal Efficiency of the Cycle')
ax.grid(True)

# Customize plot appearance
ax.xaxis.label.set_size(14)
ax.yaxis.label.set_size(14)
ax.title.set_size(16)
ax.tick_params(axis='both', which='major', labelsize=12)
ax.tick_params(axis='both', which='minor', labelsize=10)

plt.legend(['Thermal Efficiency'])
plt.show()

# Additional calculations and plots for varying dT_heater and dT_reboiler
dT_heater_ls = np.linspace(10, 200, 20)
dT_reboiler_ls = np.linspace(25, 200, 40)

dT_heater_arr, dT_reboiler_arr = np.meshgrid(dT_heater_ls, dT_reboiler_ls)

Turbine_power_arr = np.zeros_like(dT_heater_arr)
eff_cycle_arr = np.zeros_like(dT_heater_arr)
power_net_arr = np.zeros_like(dT_heater_arr)

shape = dT_heater_arr.shape

for i in range(shape[0]):
    for j in range(shape[1]):
        Turbine_power_arr[i, j], eff_cycle_arr[i, j], power_net_arr[i, j] = calc_geminy(
            dT_reboiler_arr[i, j],
            dT_heater_arr[i, j],
            Compressor_PR,
            turbine_efficiencies[0],  # Use a fixed turbine efficiency for this calculation
            Compressor_eff,
            Reboiler_eff,
            Heater_eff,
            Rec_eff,
            Eco_eff
        )

plt.figure("power", figsize=(8, 6), dpi=600)
plt.contourf(Heater_T_in_hot - dT_heater_ls - 273.15,
             Reboiler_steam_T + dT_reboiler_ls - 273.15,
             Turbine_power_arr / 1e6, 50, cmap=plt.cm.jet)
cb = plt.colorbar()
cb.set_label("Turbine power [MW]")
plt.xlabel("Turbine inlet temperature [Â°C]")
plt.ylabel("Reboiler CO2 inlet temperature [Â°C]")

plt.figure("eff", figsize=(8, 6), dpi=600)
plt.contourf(Heater_T_in_hot - dT_heater_ls - 273.15,
             Reboiler_steam_T + dT_reboiler_ls - 273.15,
             eff_cycle_arr * 1e2, 50, cmap=plt.cm.jet)
cb = plt.colorbar()
cb.set_label("Power cycle efficiency [%]")
plt.xlabel("Turbine inlet temperature [Â°C]")
plt.ylabel("Reboiler CO2 inlet temperature [Â°C]")

plt.figure("net", figsize=(8, 6), dpi=600)
plt.contourf(Heater_T_in_hot - dT_heater_ls - 273.15,
             Reboiler_steam_T + dT_reboiler_ls - 273.15,
             power_net_arr / 1e6, 50, cmap=plt.cm.jet)
cb = plt.colorbar()
cb.set_label("Net power [MW]")
plt.xlabel("Turbine inlet temperature [Â°C]")
plt.ylabel("Reboiler CO2 inlet temperature [Â°C]")

plt.show()

# Additional calculations and plots for varying Compressor PR and dT_reboiler
PR_ls = np.linspace(2, 4, 20)
dT_reboiler_ls = np.linspace(25, 200, 40)

PR_arr, dT_reboiler_arr = np.meshgrid(PR_ls, dT_reboiler_ls)

Turbine_power_arr = np.zeros_like(PR_arr)
eff_cycle_arr = np.zeros_like(PR_arr)
power_net_arr = np.zeros_like(PR_arr)

shape = PR_arr.shape

for i in range(shape[0]):
    for j in range(shape[1]):
        Turbine_power_arr[i, j], eff_cycle_arr[i, j], power_net_arr[i, j] = calc_geminy(
            dT_reboiler_arr[i, j],
            10.,
            PR_arr[i, j],
            turbine_efficiencies[0],  # Use a fixed turbine efficiency for this calculation
            Compressor_eff,
            Reboiler_eff,
            Heater_eff,
            Rec_eff,
            Eco_eff
        )

plt.figure("power_pr", figsize=(8, 6), dpi=600)
plt.contourf(PR_ls,
             Reboiler_steam_T + dT_reboiler_ls - 273.15,
             Turbine_power_arr / 1e6, 50, cmap=plt.cm.jet)
cb = plt.colorbar()
cb.set_label("Turbine power [MW]")
plt.xlabel("Compressor pressure ratio [-]")
plt.ylabel("Reboiler CO2 inlet temperature [Â°C]")

plt.figure("eff_pr", figsize=(8, 6), dpi=600)
plt.contourf(PR_ls,
             Reboiler_steam_T + dT_reboiler_ls - 273.15,
             eff_cycle_arr * 1e2, 50, cmap=plt.cm.jet)
cb = plt.colorbar()
cb.set_label("Power cycle efficiency [%]")
plt.xlabel("Compressor pressure ratio [-]")
plt.ylabel("Reboiler CO2 inlet temperature [Â°C]")

plt.figure("net_pr", figsize=(8, 6), dpi=600)
plt.contourf(PR_ls,
             Reboiler_steam_T + dT_reboiler_ls - 273.15,
             power_net_arr / 1e6, 50, cmap=plt.cm.jet)
cb = plt.colorbar()
cb.set_label("Net power [MW]")
plt.xlabel("Compressor pressure ratio [-]")
plt.ylabel("Reboiler CO2 inlet temperature [Â°C]")

plt.show()

import CoolProp.CoolProp as cp
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# Define the fluids used in the cycle
fluid_cycle = "CO2"
fluid_reactor = "He"

# Define input parameters
Reactor_power = 180e6  # Thermal power of the reactor
Compressor_p_in = 7.5e6
Compressor_T_in = 33 + 273.15
Compressor_PR = 2.5  # Pressure ratio
Turbocirculator_dp = 2e5

Heater_T_in_hot = 750 + 273.15
Heater_T_out_hot = 325 + 273.15
Heater_p_hot = 6e6

# Define optimizable variables
dT_reboiler = 25.0  # Temperature difference between steam and CO2 (540+25=565)
dT_heater = 10.0  # Temperature difference between He and CO2

Reboiler_water_T = 200. + 273.15
Reboiler_steam_T = 540. + 273.15
Reboiler_p = 13.8e6
Reboiler_fr = 64.0

Compressor_eff = 0.8
Turbocirculator_eff = 0.8
Reboiler_eff = 0.95
Heater_eff = 0.9
Rec_eff = 0.95
Eco_eff = 0.95

# Function to calculate thermodynamic properties and generate T-S diagram
def calc_geminy(dT_reboiler, dT_heater, Compressor_PR, Turbine_eff, Compressor_eff, Reboiler_eff, Heater_eff, Rec_eff, Eco_eff):
    # Reactor enthalpy calculations
    Reactor_h_i = cp.PropsSI('H', 'T', Heater_T_in_hot, 'P', Heater_p_hot, fluid_reactor)
    Reactor_h_o = cp.PropsSI('H', 'T', Heater_T_out_hot, 'P', Heater_p_hot, fluid_reactor)
    Reactor_fr = Reactor_power / (Reactor_h_i - Reactor_h_o)

    # Compressor calculations
    Compressor_p_out = Compressor_p_in * Compressor_PR
    Compressor_h_in = cp.PropsSI('H', 'T', Compressor_T_in, 'P', Compressor_p_in, fluid_cycle)
    Compressor_s_in = cp.PropsSI('S', 'T', Compressor_T_in, 'P', Compressor_p_in, fluid_cycle)
    Compressor_h_out_id = cp.PropsSI('H', 'S', Compressor_s_in, 'P', Compressor_p_out, fluid_cycle)
    Compressor_h_out = Compressor_h_in + (Compressor_h_out_id - Compressor_h_in) / Compressor_eff
    Compressor_T_out = cp.PropsSI('T', 'H', Compressor_h_out, 'P', Compressor_p_out, fluid_cycle)
    Compressor_s_out = cp.PropsSI('S', 'T', Compressor_T_out, 'P', Compressor_p_out, fluid_cycle)

    # Turbocirculator calculations
    Turbocirculator_p_out = Compressor_p_in + Turbocirculator_dp
    Turbocirculator_h_in = cp.PropsSI('H', 'T', Compressor_T_in, 'P', Compressor_p_in, fluid_cycle)
    Turbocirculator_s_in = cp.PropsSI('S', 'T', Compressor_T_in, 'P', Compressor_p_in, fluid_cycle)
    Turbocirculator_h_out_id = cp.PropsSI('H', 'S', Turbocirculator_s_in, 'P', Turbocirculator_p_out, fluid_cycle)
    Turbocirculator_h_out = Turbocirculator_h_in + (Turbocirculator_h_out_id - Turbocirculator_h_in) / Turbocirculator_eff
    Turbocirculator_T_out = cp.PropsSI('T', 'H', Turbocirculator_h_out, 'P', Turbocirculator_p_out, fluid_cycle)
    Turbocirculator_s_out = cp.PropsSI('S', 'T', Turbocirculator_T_out, 'P', Turbocirculator_p_out, fluid_cycle)

    # Reboiler calculations
    Reboiler_T_sat = cp.PropsSI('T', 'Q', 0., 'P', Reboiler_p, "H2O")
    Reboiler_h_in = cp.PropsSI('H', 'T', Reboiler_water_T, 'P', Reboiler_p, "H2O")
    Reboiler_h_out = cp.PropsSI('H', 'T', Reboiler_steam_T, 'P', Reboiler_p, "H2O")
    Reboiler_power = (Reboiler_h_out - Reboiler_h_in) * Reboiler_fr

    # Heater 2 calculations
    Heater_2_T_out_cold = Reboiler_steam_T + dT_reboiler
    Heater_2_h_out_cold = cp.PropsSI('H', 'T', Heater_2_T_out_cold, 'P', Turbocirculator_p_out, fluid_cycle)
    if Heater_2_T_out_cold > Heater_T_in_hot - 5:
        return np.nan, np.nan, np.nan

    Reboiler_h_out_hot_id = cp.PropsSI('H', 'T', Reboiler_water_T, 'P', Compressor_p_in, fluid_cycle)
    Reboiler_h_in_hot = Heater_2_h_out_cold
    Reboiler_T_in_hot = cp.PropsSI('T', 'H', Reboiler_h_in_hot, 'P', Turbocirculator_p_out, fluid_cycle)
    Reboiler_dh = (Reboiler_h_in_hot - Reboiler_h_out_hot_id) * Reboiler_eff
    Reboiler_h_out_hot = Reboiler_h_in_hot - Reboiler_dh
    Reboiler_T_out_hot = cp.PropsSI('T', 'H', Reboiler_h_out_hot, 'P', Compressor_p_in, fluid_cycle)
    Reboiler_CO2_fr = Reboiler_power / Reboiler_dh

    # Economizer calculations
    Eco_h_in_hot = Reboiler_h_out_hot
    Eco_T_in_hot = Reboiler_T_out_hot
    Eco_h_out_hot_id = cp.PropsSI('H', 'T', Turbocirculator_T_out, 'P', Compressor_p_in, fluid_cycle)
    Eco_dh = (Eco_h_in_hot - Eco_h_out_hot_id) * Eco_eff
    Eco_h_out_hot = Eco_h_in_hot - Eco_dh
    Eco_T_out_hot = cp.PropsSI('T', 'H', Eco_h_out_hot, 'P', Compressor_p_in, fluid_cycle)
    Eco_h_out_cold = Turbocirculator_h_out + Eco_dh
    Eco_T_out_cold = cp.PropsSI('T', 'H', Eco_h_out_cold, 'P', Turbocirculator_p_out, fluid_cycle)
    if Eco_T_in_hot < Eco_T_out_cold + 5:
        return np.nan, np.nan, np.nan

    Heater_2_h_in_cold = Eco_h_out_cold
    Heater_2_T_in_cold = Eco_T_out_cold
    Heater_2_power = (Heater_2_h_out_cold - Heater_2_h_in_cold) * Reboiler_CO2_fr

    Turbocirculator_power = (Turbocirculator_h_out - Turbocirculator_h_in) * Reboiler_CO2_fr

    dT_heater_1_in = 50.
    Heater_1_T_in_cold = Heater_T_out_hot - dT_heater_1_in  # Initial guess

    max_dT_error = 1e-3
    dT_error = 1e6
    iteration = 0

    while dT_error > max_dT_error:
        Heater_1_power = Reactor_power - Heater_2_power
        Heater_1_T_out_cold = Heater_T_in_hot - dT_heater
        Heater_1_h_out_cold = cp.PropsSI('H', 'T', Heater_1_T_out_cold, 'P', Compressor_p_out, fluid_cycle)
        Heater_1_h_in_cold = cp.PropsSI('H', 'T', Heater_1_T_in_cold, 'P', Compressor_p_out, fluid_cycle)
        Heater_1_dh = (Heater_1_h_out_cold - Heater_1_h_in_cold)

        Turbine_fr = Heater_1_power / Heater_1_dh
        m_co2_total = Turbine_fr + Reboiler_CO2_fr

        Compressor_power = (Compressor_h_out - Compressor_h_in) * Turbine_fr

        FR_ratio = Reboiler_CO2_fr / m_co2_total

        Turbine_h_in = Heater_1_h_out_cold
        Turbine_s_in = cp.PropsSI('S', 'H', Turbine_h_in, 'P', Compressor_p_out, fluid_cycle)
        Turbine_h_out_id = cp.PropsSI('H', 'S', Turbine_s_in, 'P', Compressor_p_in, fluid_cycle)
        Turbine_h_out = Turbine_h_in - (Turbine_h_in - Turbine_h_out_id) * Turbine_eff
        Turbine_T_out = cp.PropsSI('T', 'H', Turbine_h_out, 'P', Compressor_p_in, fluid_cycle)
        Turbine_s_out = cp.PropsSI('S', 'T', Turbine_T_out, 'P', Compressor_p_in, fluid_cycle)
        Turbine_power = Turbine_fr * (Turbine_h_in - Turbine_h_out)

        Rec_h_out_hot_id = cp.PropsSI('H', 'T', Compressor_T_out, 'P', Compressor_p_in, fluid_cycle)
        Rec_h_out_hot = Turbine_h_out - (Turbine_h_out - Rec_h_out_hot_id) * Rec_eff
        Rec_T_out_hot = cp.PropsSI('T', 'H', Rec_h_out_hot, 'P', Compressor_p_in, fluid_cycle)
        Rec_dh = Turbine_h_out - Rec_h_out_hot
        Rec_power = Turbine_fr * Rec_dh
        Rec_h_out_cold = Compressor_h_out + Rec_dh
        Rec_T_out_cold = cp.PropsSI('T', 'H', Rec_h_out_cold, 'P', Compressor_p_out, fluid_cycle)
        Rec_s_out_cold = cp.PropsSI('S', 'T', Rec_T_out_cold, 'P', Compressor_p_out, fluid_cycle)
        if Turbine_T_out < Rec_T_out_cold + 5:
            return np.nan, np.nan, np.nan

        mix_h = (Rec_h_out_hot * Turbine_fr + Eco_h_out_hot * Reboiler_CO2_fr) / m_co2_total
        mix_T = cp.PropsSI('T', 'H', mix_h, 'P', Compressor_p_in, fluid_cycle)
        mix_s = cp.PropsSI('S', 'T', mix_T, 'P', Compressor_p_in, fluid_cycle)

        Cooler_h_in = mix_h
        Cooler_h_out = Compressor_h_in
        Cooler_power = (Cooler_h_in - Cooler_h_out) * m_co2_total

        eff_comb = (Reactor_power - Cooler_power) / Reactor_power
        eff_cycle = (Turbine_power - Compressor_power) / Heater_1_power

        dT_error = abs(Heater_1_T_in_cold - Rec_T_out_cold)
        iteration += 1

        Heater_1_T_in_cold = Rec_T_out_cold

    power_net = Turbine_power - Compressor_power

    return Turbine_power, eff_cycle, power_net, {
        'T_inlet_compressor': Compressor_T_in,    # Point 1
        'T_out_compressor': Compressor_T_out,     # Point 2
        'T_out_heater': Heater_1_T_out_cold,      # Point 3
        'T_out_turbine': Turbine_T_out,           # Point 4
        'T_out_recuperator': Rec_T_out_cold,      # Point 5
        'T_out_cooler': mix_T,                    # Point 6
        's_inlet_compressor': Compressor_s_in,    # Point 1
        's_out_compressor': Compressor_s_out,     # Point 2
        's_out_heater': cp.PropsSI('S', 'T', Heater_1_T_out_cold, 'P', Compressor_p_out, fluid_cycle), # Point 3
        's_out_turbine': Turbine_s_out,           # Point 4
        's_out_recuperator': Rec_s_out_cold,      # Point 5
        's_out_cooler': mix_s                     # Point 6
    }

# Plot T-S diagram for a specific set of parameters
def plot_ts_diagram(params):
    # Generate data points for the saturation curve of CO2
    T_sat = np.linspace(216.59, cp.PropsSI('Tcrit', fluid_cycle), 500)
    s_liq = [cp.PropsSI('S', 'T', T, 'Q', 0, fluid_cycle) for T in T_sat]
    s_vap = [cp.PropsSI('S', 'T', T, 'Q', 1, fluid_cycle) for T in T_sat]

    states = {
        'T': [
            params['T_inlet_compressor'],  # 1
            params['T_out_compressor'],    # 2
            params['T_out_heater'],        # 3
            params['T_out_turbine'],       # 4
            params['T_out_recuperator'],   # 5
            params['T_out_cooler'],        # 6
            params['T_inlet_compressor']   # Close the cycle by returning to point 1
        ],
        's': [
            params['s_inlet_compressor'],  # 1
            params['s_out_compressor'],    # 2
            params['s_out_heater'],        # 3
            params['s_out_turbine'],       # 4
            params['s_out_recuperator'],   # 5
            params['s_out_cooler'],        # 6
            params['s_inlet_compressor']   # Close the cycle by returning to point 1
        ]
    }

    # Plot T-S diagram
    fig, ax = plt.subplots(figsize=(8, 6), dpi = 600)
    ax.plot(states['s'], states['T'], marker='o', color='black', label='Cycle')
    ax.plot(s_liq, T_sat, 'r--', label='Saturation Dome (liquid)')
    ax.plot(s_vap, T_sat, 'b--', label='Saturation Dome (vapor)')

    # Annotate the state points
    for i, (s, T) in enumerate(zip(states['s'], states['T'])):
        ax.annotate(str(i+1), (s, T), textcoords="offset points", xytext=(0,10), ha='center')

    ax.set_title('T-S Diagram for the Cycle')
    ax.set_xlabel('Entropy (J/kg-K)')
    ax.set_ylabel('Temperature (K)')
    ax.grid(True)
    ax.legend()

    plt.tight_layout()
    plt.show()

# Example calculation and plotting T-S diagram
Turbine_power, eff_cycle, power_net, params = calc_geminy(
    dT_reboiler, dT_heater, Compressor_PR, 0.85, Compressor_eff, Reboiler_eff, Heater_eff, Rec_eff, Eco_eff
)
print(f"Turbine Power: {Turbine_power / 1e6:.2f} MW")
print(f"Cycle Efficiency: {eff_cycle * 100:.2f} %")
print(f"Net Power: {power_net / 1e6:.2f} MW")

plot_ts_diagram(params)

