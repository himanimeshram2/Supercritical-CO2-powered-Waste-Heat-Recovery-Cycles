# -*- coding: utf-8 -*-
"""WHR_Cycle.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-mewJOQgsO1ldXrlDBKTvm4hxxSDPiMR
"""

pip install coolprop

import CoolProp.CoolProp as CP
import matplotlib.pyplot as plt
import pandas as pd

class sCO2Cycle:
    def __init__(self):
        self.fluid = 'CO2'
        self.P_min = 8.5e6  # Minimum cycle pressure in Pa
        self.T_min = 37 + 273.15  # Minimum cycle temperature in K
        self.T_whr_inlet = 270 + 273.15  # WHR inlet temperature in K
        self.P_max = 25e6  # Maximum cycle pressure in Pa
        self.eff_turbine = 0.9
        self.eff_compressor = 0.85
        self.delta_Tua = 20  # Temperature difference between flue gases and sCO2 at WHR inlet section in K
        self.T_cooler_out = 300  # Cooler outlet temperature in K
        self.mass_flow_rates = [2.0, 2.11, 2.22, 2.33]  # Mass flow rates in kg/s
        self.max_temperatures = [500, 487.5, 475]  # Maximum temperatures in °C

    def turbine(self, T_in, P_in, P_out):
        h_in = CP.PropsSI('H', 'T', T_in, 'P', P_in, self.fluid) / 1000  # Convert J/kg to kJ/kg
        s_in = CP.PropsSI('S', 'T', T_in, 'P', P_in, self.fluid) / 1000  # Convert J/kgK to kJ/kgK
        h_outs = CP.PropsSI('H', 'P', P_out, 'S', s_in * 1000, self.fluid) / 1000  # Convert J/kg to kJ/kg
        h_out = h_in - self.eff_turbine * (h_in - h_outs)
        T_out = CP.PropsSI('T', 'H', h_out * 1000, 'P', P_out, self.fluid)
        s_out = CP.PropsSI('S', 'H', h_out * 1000, 'P', P_out, self.fluid) / 1000  # Convert J/kgK to kJ/kgK
        return T_out, h_out, s_out

    def compressor(self, T_in, P_in, P_out):
        h_in = CP.PropsSI('H', 'T', T_in, 'P', P_in, self.fluid) / 1000  # Convert J/kg to kJ/kg
        s_in = CP.PropsSI('S', 'T', T_in, 'P', P_in, self.fluid) / 1000  # Convert J/kgK to kJ/kgK
        h_outs = CP.PropsSI('H', 'P', P_out, 'S', s_in * 1000, self.fluid) / 1000  # Convert J/kg to kJ/kg
        h_out = h_in + (h_outs - h_in) / self.eff_compressor
        T_out = CP.PropsSI('T', 'H', h_out * 1000, 'P', P_out, self.fluid)
        s_out = CP.PropsSI('S', 'H', h_out * 1000, 'P', P_out, self.fluid) / 1000  # Convert J/kgK to kJ/kgK
        return T_out, h_out, s_out

    def recuperator(self, T_in, P_in, T_out):
        h_in = CP.PropsSI('H', 'T', T_in, 'P', P_in, self.fluid) / 1000  # Convert J/kg to kJ/kg
        h_out = CP.PropsSI('H', 'T', T_out, 'P', P_in, self.fluid) / 1000  # Convert J/kg to kJ/kg
        s_out = CP.PropsSI('S', 'T', T_out, 'P', P_in, self.fluid) / 1000  # Convert J/kgK to kJ/kgK
        return T_out, h_out, s_out

    def cooler(self, T_in, P_in):
        h_in = CP.PropsSI('H', 'T', T_in, 'P', P_in, self.fluid) / 1000  # Convert J/kg to kJ/kg
        h_out = CP.PropsSI('H', 'T', self.T_cooler_out, 'P', P_in, self.fluid) / 1000  # Convert J/kg to kJ/kg
        s_out = CP.PropsSI('S', 'T', self.T_cooler_out, 'P', P_in, self.fluid) / 1000  # Convert J/kgK to kJ/kgK
        return self.T_cooler_out, h_out, s_out

    def run_cycle(self, mass_flow_rate, max_temp):
        states = []

        # WHR Unit (Waste Heat Recovery Unit)
        T_whr_out = max_temp + 273.15  # Update WHR outlet temperature based on max temp
        h_whr_out = CP.PropsSI('H', 'T', T_whr_out, 'P', self.P_max, self.fluid) / 1000  # Convert J/kg to kJ/kg
        s_whr_out = CP.PropsSI('S', 'T', T_whr_out, 'P', self.P_max, self.fluid) / 1000  # Convert J/kgK to kJ/kgK
        states.append(['WHR Unit', self.T_whr_inlet, self.P_max, h_whr_out, s_whr_out])

        # Turbine 1
        T1_out, h1_out, s1_out = self.turbine(T_whr_out, self.P_max, self.P_min)
        states.append(['Turbine 1', T1_out, self.P_min, h1_out, s1_out])

        # Turbine 2
        T2_out, h2_out, s2_out = self.turbine(T1_out, self.P_min, self.P_min / 2)
        states.append(['Turbine 2', T2_out, self.P_min / 2, h2_out, s2_out])

        # High-Temperature Recuperator
        T3_out, h3_out, s3_out = self.recuperator(T2_out, self.P_min / 2, self.T_whr_inlet)
        states.append(['Recuperator', T3_out, self.P_min / 2, h3_out, s3_out])

        # Cooler
        T4_out, h4_out, s4_out = self.cooler(T3_out, self.P_min / 2)
        states.append(['Cooler', T4_out, self.P_min / 2, h4_out, s4_out])

        # Compressor
        T5_out, h5_out, s5_out = self.compressor(T4_out, self.P_min / 2, self.P_min)
        states.append(['Compressor', T5_out, self.P_min, h5_out, s5_out])

        # Recuperator (Heated stream)
        T6_out, h6_out, s6_out = self.recuperator(T5_out, self.P_min, self.T_whr_inlet)
        states.append(['Recuperator (heated)', T6_out, self.P_min, h6_out, s6_out])

        # Calculate cycle efficiency
        work_turbine1 = (states[0][3] - states[1][3]) * mass_flow_rate  # in kW
        work_turbine2 = (states[1][3] - states[2][3]) * mass_flow_rate  # in kW
        work_compressor = (states[5][3] - states[4][3]) * mass_flow_rate  # in kW
        q_in = (states[6][3] - states[4][3]) * mass_flow_rate  # in kW

        cycle_efficiency = ((work_turbine1 + work_turbine2 - work_compressor) / q_in) * 100

        print(f"Mass Flow Rate: {mass_flow_rate} kg/s, Max Temp: {max_temp} °C")
        print(f"Work Turbine 1: {work_turbine1:.2f} kW, Work Turbine 2: {work_turbine2:.2f} kW, Work Compressor: {work_compressor:.2f} kW, Heat In: {q_in:.2f} kW")
        print(f"Cycle Efficiency: {cycle_efficiency:.2f}%")

        if cycle_efficiency > 100 or cycle_efficiency < 0:
            cycle_efficiency = 0  # Set invalid efficiency to 0 for this iteration

        return states, cycle_efficiency

    def iterate_cycle(self):
        results = []

        for mass_flow_rate in self.mass_flow_rates:
            for max_temp in self.max_temperatures:
                self.T_whr_inlet = max_temp + 273.15  # Update maximum temperature
                states, efficiency = self.run_cycle(mass_flow_rate, max_temp)
                results.append([mass_flow_rate, max_temp, efficiency])

                df = pd.DataFrame(states, columns=['Component', 'Temperature (K)', 'Pressure (Pa)', 'Enthalpy (kJ/kg)', 'Entropy (kJ/kgK)'])
                df['Mass Flow Rate (kg/s)'] = mass_flow_rate
                print(df)
                print(f"Cycle Efficiency: {efficiency:.2f}%\n")

        # Output results in tabulated format
        results_df = pd.DataFrame(results, columns=['Mass Flow Rate (kg/s)', 'Max Temperature (°C)', 'Cycle Efficiency (%)'])
        print(results_df)

        # Plotting T-S Diagram for the last iteration
        s_vals = df['Entropy (kJ/kgK)'].tolist()
        T_vals = df['Temperature (K)'].tolist()

        # Ensure proper order of state points for the T-S diagram
        ordered_indices = [0, 1, 2, 3, 4, 5, 6, 0]  # WHR Unit -> Turbine 1 -> Turbine 2 -> Recuperator -> Cooler -> Compressor -> Recuperator (heated) -> WHR Unit
        ordered_s_vals = [s_vals[i] for i in ordered_indices]
        ordered_T_vals = [T_vals[i] for i in ordered_indices]

        plt.figure()
        plt.plot(ordered_s_vals, ordered_T_vals, marker='o')
        for i, txt in enumerate([df['Component'][i] for i in ordered_indices]):
            plt.annotate(txt, (ordered_s_vals[i], ordered_T_vals[i]))
        plt.xlabel('Entropy (kJ/kgK)')
        plt.ylabel('Temperature (K)')
        plt.title('T-S Diagram of sCO2 WHR Cycle')
        plt.grid(True)
        plt.show()

if __name__ == "__main__":
    cycle = sCO2Cycle()
    cycle.iterate_cycle()

