# -*- coding: utf-8 -*-
"""srbc with GA version 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KrvMJw0RHol9eDDJFm5PlQk2uzSxbAlI
"""

pip install CoolProp pygad matplotlib pandas

import CoolProp.CoolProp as CP
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import pygad

# Constants
mass_flow_rate_cycle = 93.2  # kg/s
gas_cooler_temp_out = 305.4  # K
gas_cooler_pressure_out = 7700  # kPa
turbine_pressure_out = 7855  # kPa
ht_recuperator_temp_out = 479.1  # K
losses = 0.07

# Function to calculate thermal efficiency for a given pressure ratio and machinery performance
def calculate_efficiency(pressure_ratio, eff_turbine, eff_compressor, max_temp):
    fluid = 'CO2'
    primary_hx_temp_out = max_temp
    primary_hx_pressure = gas_cooler_pressure_out * pressure_ratio

    # Compressor inlet state (Point 1)
    T_inlet_compressor = gas_cooler_temp_out
    P_inlet_compressor = gas_cooler_pressure_out
    h_inlet_compressor = CP.PropsSI('H', 'T', T_inlet_compressor, 'P', P_inlet_compressor * 1000, fluid)
    s_inlet_compressor = CP.PropsSI('S', 'T', T_inlet_compressor, 'P', P_inlet_compressor * 1000, fluid)

    # Compressor outlet state (Point 2)
    P_out_compressor = P_inlet_compressor * pressure_ratio
    h_out_isentropic_compressor = CP.PropsSI('H', 'P', P_out_compressor * 1000, 'S', s_inlet_compressor, fluid)
    h_out_actual_compressor = h_inlet_compressor + (h_out_isentropic_compressor - h_inlet_compressor) / eff_compressor
    T_out_compressor = CP.PropsSI('T', 'H', h_out_actual_compressor, 'P', P_out_compressor * 1000, fluid)

    # HT recuperator outlet state (Point 4)
    T_out_ht_recuperator_high = ht_recuperator_temp_out
    P_out_ht_recuperator_high = primary_hx_pressure
    h_out_ht_recuperator_high = CP.PropsSI('H', 'T', T_out_ht_recuperator_high, 'P', P_out_ht_recuperator_high * 1000, fluid)

    # Heater outlet state (Point 5)
    T_out_heater = primary_hx_temp_out
    h_out_heater = CP.PropsSI('H', 'T', T_out_heater, 'P', primary_hx_pressure * 1000, fluid)

    # Turbine outlet state (Point 6)
    P_out_turbine = turbine_pressure_out
    h_out_isentropic_turbine = CP.PropsSI('H', 'P', P_out_turbine * 1000, 'S', CP.PropsSI('S', 'H', h_out_heater, 'P', primary_hx_pressure * 1000, fluid), fluid)
    h_out_actual_turbine = h_out_heater - eff_turbine * (h_out_heater - h_out_isentropic_turbine)
    T_out_turbine = CP.PropsSI('T', 'H', h_out_actual_turbine, 'P', P_out_turbine * 1000, fluid)

    # Overall cycle efficiency
    W_turbine = mass_flow_rate_cycle * (h_out_heater - h_out_actual_turbine)
    W_comp = mass_flow_rate_cycle * (h_out_actual_compressor - h_inlet_compressor)
    Q_in = mass_flow_rate_cycle * (h_out_heater - h_out_ht_recuperator_high)

    net_power_output = (W_turbine - W_comp) * (1 - losses)
    thermal_efficiency = net_power_output / Q_in

    return thermal_efficiency

# Define temperature ranges, turbine/compressor efficiencies, and pressure ratios
temperature_ranges = [500 + 273.15, 600 + 273.15, 700 + 273.15, 800 + 273.15]  # K
turbine_efficiencies = [0.80, 0.85, 0.90]
compressor_efficiencies = [0.75, 0.80, 0.85]
pressure_ratios = np.linspace(2.0, 10.0, 100)

# Analyze optimal pressure ratio for turbine and compressor efficiency
optimal_pr_turbine = []
optimal_pr_compressor = []

# Effect of turbine efficiency on optimal pressure ratio
for eff_turbine in turbine_efficiencies:
    optimal_pr = []
    for temp in temperature_ranges:
        efficiencies = []
        for pr in pressure_ratios:
            eff = calculate_efficiency(pr, eff_turbine, 0.85, temp)  # Assume compressor efficiency = 85%
            efficiencies.append(eff)
        optimal_pr.append(pressure_ratios[np.argmax(efficiencies)])
    optimal_pr_turbine.append(optimal_pr)

# Effect of compressor efficiency on optimal pressure ratio
for eff_compressor in compressor_efficiencies:
    optimal_pr = []
    for temp in temperature_ranges:
        efficiencies = []
        for pr in pressure_ratios:
            eff = calculate_efficiency(pr, 0.85, eff_compressor, temp)  # Assume turbine efficiency = 85%
            efficiencies.append(eff)
        optimal_pr.append(pressure_ratios[np.argmax(efficiencies)])
    optimal_pr_compressor.append(optimal_pr)

# Plot effect of turbine efficiency on optimal pressure ratio
for i, eff_turbine in enumerate(turbine_efficiencies):
    plt.plot([temp - 273.15 for temp in temperature_ranges], optimal_pr_turbine[i], label=f'Turbine Efficiency = {eff_turbine}')

plt.xlabel('Cycle Temperature (°C)')
plt.ylabel('Optimal Pressure Ratio')
plt.title('Effect of Turbine Efficiency on Optimal Pressure Ratio')
plt.legend()
plt.grid(True)
plt.show()

# Plot effect of compressor efficiency on optimal pressure ratio
for i, eff_compressor in enumerate(compressor_efficiencies):
    plt.plot([temp - 273.15 for temp in temperature_ranges], optimal_pr_compressor[i], label=f'Compressor Efficiency = {eff_compressor}')

plt.xlabel('Cycle Temperature (°C)')
plt.ylabel('Optimal Pressure Ratio')
plt.title('Effect of Compressor Efficiency on Optimal Pressure Ratio')
plt.legend()
plt.grid(True)
plt.show()

# Analyze thermal efficiency vs cycle temperature
thermal_efficiency_vs_temp = []
for temp in temperature_ranges:
    thermal_efficiencies = []
    for eff_turbine in turbine_efficiencies:
        eff = calculate_efficiency(8.0, eff_turbine, 0.85, temp)  # Assume PR = 8 and Compressor Efficiency = 85%
        thermal_efficiencies.append(eff)
    thermal_efficiency_vs_temp.append(thermal_efficiencies)

# Plot thermal efficiency vs cycle temperature
for i, eff_turbine in enumerate(turbine_efficiencies):
    plt.plot([temp - 273.15 for temp in temperature_ranges], [eff[i] for eff in thermal_efficiency_vs_temp], label=f'Turbine Efficiency = {eff_turbine}')

plt.xlabel('Cycle Temperature (°C)')
plt.ylabel('Thermal Efficiency')
plt.title('Thermal Efficiency vs Cycle Temperature')
plt.legend()
plt.grid(True)
plt.show()

# GA Optimization Part
def fitness_function(ga_instance, solution, solution_idx):
    eff_turbine, eff_compressor, pressure_ratio, max_temp = solution
    return calculate_efficiency(pressure_ratio, eff_turbine, eff_compressor, max_temp)

ga_instance = pygad.GA(
    num_generations=100,
    num_parents_mating=5,
    fitness_func=fitness_function,
    sol_per_pop=20,
    num_genes=4,
    gene_space=[
        {'low': 0.7, 'high': 0.95},  # Turbine Efficiency
        {'low': 0.7, 'high': 0.95},  # Compressor Efficiency
        {'low': 2.0, 'high': 10.0},  # Pressure Ratio
        {'low': 773.15, 'high': 1073.15}  # Maximum Temperature (500°C to 800°C)
    ],
    parent_selection_type="sss",
    crossover_type="single_point",
    mutation_type="random",
    mutation_percent_genes=25
)

ga_instance.run()

# Best solution from GA
best_solution, best_fitness, _ = ga_instance.best_solution()
best_turbine_efficiency, best_compressor_efficiency, best_pressure_ratio, best_max_temp = best_solution
best_max_temp_c = best_max_temp - 273.15  # Convert back to Celsius

# Tabulate Results: Before and After GA
baseline_results = []
for max_temp in temperature_ranges:
    for eff_turbine in turbine_efficiencies:
        for eff_compressor in compressor_efficiencies:
            efficiencies = []
            for pr in pressure_ratios:
                eff = calculate_efficiency(pr, eff_turbine, eff_compressor, max_temp)
                efficiencies.append(eff)
            optimal_pr = pressure_ratios[np.argmax(efficiencies)]
            optimal_efficiency = max(efficiencies)
            baseline_results.append([max_temp - 273.15, eff_turbine, eff_compressor, optimal_pr, optimal_efficiency])

baseline_df = pd.DataFrame(baseline_results, columns=['Temp (°C)', 'Turbine Eff', 'Compressor Eff', 'Optimal PR', 'Thermal Eff'])
ga_results = pd.DataFrame([{
    "Temp (°C)": best_max_temp_c,
    "Turbine Eff": best_turbine_efficiency,
    "Compressor Eff": best_compressor_efficiency,
    "Optimal PR": best_pressure_ratio,
    "Thermal Eff": best_fitness
}])

# Print Results - Displaying ALL rows
print("\nBaseline Results (All Rows):")
print(baseline_df.to_string(index=False))  # Display all rows without truncation

print("\nGA Optimized Results:")
print(ga_results.to_string(index=False))  # Display GA results

# Plot comparison of baseline and GA optimal pressure ratios
baseline_opt_prs = baseline_df.groupby(['Temp (°C)'])['Optimal PR'].mean()
plt.plot(baseline_opt_prs.index, baseline_opt_prs.values, label="Baseline Optimal PR", marker='o')

plt.scatter([best_max_temp_c], [best_pressure_ratio], color='red', label="GA Optimized PR", s=100)
plt.xlabel('Cycle Temperature (°C)')
plt.ylabel('Optimal Pressure Ratio')
plt.title('Comparison of Baseline and GA Optimized Pressure Ratios')
plt.legend()
plt.grid(True)
plt.show()

