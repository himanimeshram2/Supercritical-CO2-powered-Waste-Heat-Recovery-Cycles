# -*- coding: utf-8 -*-
"""SRBC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FJORBIULyU39g5zOuXWG5_R17uyu9vCM
"""

pip install coolprop

import CoolProp.CoolProp as CP
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# Define constants
waste_heat_temp = 811.2  # K
mass_flow_rate_waste_heat = 68.8  # kg/s
primary_hx_power = 24805  # kW
primary_hx_pressure = 23889  # kPa
primary_hx_temp_out = 680.5  # K
mass_flow_rate_cycle = 93.2  # kg/s
turbine_power = 10315  # kW
turbine_temp_out = 570.5  # K
turbine_pressure_out = 7855  # kPa
ht_recuperator_power = 23694  # kW
ht_recuperator_temp_out = 479.1  # K
gas_cooler_temp_out = 305.4  # K
gas_cooler_pressure_out = 7700  # kPa
compressor_isentropic_efficiency = 0.82

# Function to calculate states and performance of the cycle
def calculate_SRBC(eff_turbine, eff_compressor, losses, pressure_ratio):
    fluid = 'CO2'

    # Compressor inlet state (Point 1)
    T_inlet_compressor = gas_cooler_temp_out
    P_inlet_compressor = gas_cooler_pressure_out
    h_inlet_compressor = CP.PropsSI('H', 'T', T_inlet_compressor, 'P', P_inlet_compressor*1000, fluid)
    s_inlet_compressor = CP.PropsSI('S', 'T', T_inlet_compressor, 'P', P_inlet_compressor*1000, fluid)

    # Compressor outlet state (Point 2)
    P_out_compressor = P_inlet_compressor * pressure_ratio
    h_out_isentropic_compressor = CP.PropsSI('H', 'P', P_out_compressor*1000, 'S', s_inlet_compressor, fluid)
    h_out_actual_compressor = h_inlet_compressor + (h_out_isentropic_compressor - h_inlet_compressor) / eff_compressor
    T_out_compressor = CP.PropsSI('T', 'H', h_out_actual_compressor, 'P', P_out_compressor*1000, fluid)
    s_out_compressor = CP.PropsSI('S', 'T', T_out_compressor, 'P', P_out_compressor*1000, fluid)

    # HT recuperator outlet state (Point 4)
    T_out_ht_recuperator_high = ht_recuperator_temp_out
    P_out_ht_recuperator_high = primary_hx_pressure
    h_out_ht_recuperator_high = CP.PropsSI('H', 'T', T_out_ht_recuperator_high, 'P', P_out_ht_recuperator_high*1000, fluid)
    s_out_ht_recuperator_high = CP.PropsSI('S', 'T', T_out_ht_recuperator_high, 'P', P_out_ht_recuperator_high*1000, fluid)

    # Heater outlet state (Point 5)
    T_out_heater = primary_hx_temp_out
    P_out_heater = primary_hx_pressure
    h_out_heater = CP.PropsSI('H', 'T', T_out_heater, 'P', P_out_heater*1000, fluid)
    s_out_heater = CP.PropsSI('S', 'T', T_out_heater, 'P', P_out_heater*1000, fluid)

    # Turbine outlet state (Point 6)
    P_out_turbine = turbine_pressure_out
    h_out_isentropic_turbine = CP.PropsSI('H', 'P', P_out_turbine*1000, 'S', s_out_ht_recuperator_high, fluid)
    h_out_actual_turbine = h_out_heater - eff_turbine * (h_out_heater - h_out_isentropic_turbine)
    T_out_turbine = CP.PropsSI('T', 'H', h_out_actual_turbine, 'P', P_out_turbine*1000, fluid)
    s_out_turbine = CP.PropsSI('S', 'T', T_out_turbine, 'P', P_out_turbine*1000, fluid)

    # HT recuperator low-pressure outlet state (Point 8)
    T_out_ht_recuperator_low = gas_cooler_temp_out
    P_out_ht_recuperator_low = P_inlet_compressor
    h_out_ht_recuperator_low = CP.PropsSI('H', 'T', T_out_ht_recuperator_low, 'P', P_out_ht_recuperator_low*1000, fluid)
    s_out_ht_recuperator_low = CP.PropsSI('S', 'T', T_out_ht_recuperator_low, 'P', P_out_ht_recuperator_low*1000, fluid)

    # Overall cycle efficiency
    W_turbine = h_out_heater - h_out_actual_turbine  # Work done by the turbine
    W_comp = h_out_actual_compressor - h_inlet_compressor  # Work done by the compressor
    Q_in = h_out_heater - h_out_ht_recuperator_high  # Heat added in the heater

    net_power_output = (W_turbine - W_comp) * (1 - losses)
    thermal_efficiency = net_power_output / Q_in

    # Return the calculated states and efficiency
    states = {
        'T': [T_inlet_compressor, T_out_compressor, T_out_ht_recuperator_high, T_out_heater, T_out_turbine, T_out_ht_recuperator_low],
        's': [s_inlet_compressor, s_out_compressor, s_out_ht_recuperator_high, s_out_heater, s_out_turbine, s_out_ht_recuperator_low]
    }
    return states, thermal_efficiency, net_power_output

# Define parameter ranges
turbine_eff_range = np.linspace(0.5, 1.0, 6)
compressor_eff_range = np.linspace(0.5, 1.0, 6)
losses_range = np.linspace(0.07, 0.10, 4)
pressure_ratio_range = np.linspace(3.12, 10, 5)

# Initialize list to store results
results = []

# Loop over parameter ranges and compute cycle performance
for eff_turbine in turbine_eff_range:
    for eff_compressor in compressor_eff_range:
        for losses in losses_range:
            for pressure_ratio in pressure_ratio_range:
                states, thermal_efficiency, net_power_output = calculate_SRBC(
                    eff_turbine, eff_compressor, losses, pressure_ratio
                )

                results.append({
                    'Turbine Efficiency': eff_turbine,
                    'Compressor Efficiency': eff_compressor,
                    'Losses': losses,
                    'Pressure Ratio': pressure_ratio,
                    'Thermal Efficiency': thermal_efficiency,
                    'Net Power Output (kW)': net_power_output
                })

# Convert results to DataFrame
results_df = pd.DataFrame(results)

# Save results to CSV
results_df.to_csv('cycle_performance_results.csv', index=False)

# Plot results with color maps and color bars
fig, axes = plt.subplots(3, 1, figsize=(14, 18))

# Plot Thermal Efficiency
scatter = axes[0].scatter(results_df['Pressure Ratio'], results_df['Thermal Efficiency'], c=results_df['Turbine Efficiency'], cmap='viridis', alpha=0.75)
axes[0].set_title('Thermal Efficiency vs. Pressure Ratio')
axes[0].set_xlabel('Pressure Ratio')
axes[0].set_ylabel('Thermal Efficiency')
cbar = fig.colorbar(scatter, ax=axes[0])
cbar.set_label('Turbine Efficiency')
axes[0].grid(True)

# Plot Net Power Output
scatter = axes[1].scatter(results_df['Pressure Ratio'], results_df['Net Power Output (kW)'], c=results_df['Compressor Efficiency'], cmap='plasma', alpha=0.75)
axes[1].set_title('Net Power Output vs. Pressure Ratio')
axes[1].set_xlabel('Pressure Ratio')
axes[1].set_ylabel('Net Power Output (kW)')
cbar = fig.colorbar(scatter, ax=axes[1])
cbar.set_label('Compressor Efficiency')
axes[1].grid(True)

# Plot Thermal Efficiency
scatter = axes[2].scatter(results_df['Pressure Ratio'], results_df['Thermal Efficiency'], c=results_df['Losses'], cmap='inferno', alpha=0.75)
axes[2].set_title('Thermal Efficiency vs. Pressure Ratio')
axes[2].set_xlabel('Pressure Ratio')
axes[2].set_ylabel('Thermal Efficiency')
cbar = fig.colorbar(scatter, ax=axes[2])
cbar.set_label('Losses')
axes[2].grid(True)

plt.tight_layout()
plt.show()

# T-S diagram
fig, ax = plt.subplots(figsize=(10, 6))
subset_results_df = results_df.iloc[::10, :]  # Plot every 10th run to reduce clutter
for idx, row in subset_results_df.iterrows():
    states, _, _ = calculate_SRBC(row['Turbine Efficiency'], row['Compressor Efficiency'], row['Losses'], row['Pressure Ratio'])
    ax.plot(states['s'], states['T'], marker='o')
ax.set_title('T-S Diagram')
ax.set_xlabel('Entropy (J/kg-K)')
ax.set_ylabel('Temperature (K)')
ax.grid(True)

plt.tight_layout()
plt.show()

# Print the output in tabulated form
print(results_df)

