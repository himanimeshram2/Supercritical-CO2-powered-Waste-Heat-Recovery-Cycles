# -*- coding: utf-8 -*-
"""Recompression Brayton Cycle with GA updated.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13Rs7GYsLCb6byFDHJwKX7Y68AeGEyLOu
"""

pip install CoolProp pygad ace pymoo

import CoolProp.CoolProp as CP
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import pygad
import seaborn as sns
import time
import warnings

# To Suppress non-critical warnings
warnings.filterwarnings('ignore')

# Constants
mass_flow_rate = 5.77  # kg/s (based on paper)
fluid = 'CO2'
pressure_in_compressor = 7.7e6  # Pa (Initial compressor inlet pressure)
pressure_out_turbine = 7.78e6  # Pa (Turbine outlet pressure)
temp_in_compressor = 305.15  # K (Compressor inlet temperature)
split_ratio = 0.6  # Split ratio between main compressor and recompressor

sns.set(style='whitegrid')

# Function to calculate thermodynamic properties and cycle performance
def calculate_efficiency(pressure_ratio, eff_turbine, eff_compressor, max_temp):
    # Main Compressor calculations
    h_in_comp = CP.PropsSI('H', 'T', temp_in_compressor, 'P', pressure_in_compressor, fluid)
    s_in_comp = CP.PropsSI('S', 'T', temp_in_compressor, 'P', pressure_in_compressor, fluid)
    pressure_out_compressor = pressure_in_compressor * pressure_ratio
    h_out_isentropic_comp = CP.PropsSI('H', 'P', pressure_out_compressor, 'S', s_in_comp, fluid)
    h_out_comp = h_in_comp + (h_out_isentropic_comp - h_in_comp) / eff_compressor
    s_out_comp = CP.PropsSI('S', 'H', h_out_comp, 'P', pressure_out_compressor, fluid)

    # Split mass flow for recompression
    mass_flow_main = mass_flow_rate * split_ratio
    mass_flow_recomp = mass_flow_rate * (1 - split_ratio)

    # Recompressor calculations
    h_out_recomp = h_out_comp  # Assume same outlet enthalpy as main compressor for simplification
    s_out_recomp = s_out_comp

    # Low Temperature Recuperator (LTR) calculations
    h_out_ltr_cold = h_out_comp  # Cold side exit enthalpy of LTR
    s_out_ltr_cold = s_out_comp
    h_out_ltr_hot = CP.PropsSI('H', 'P', pressure_out_compressor, 'S', s_in_comp, fluid)  # Hot side exit enthalpy
    s_out_ltr_hot = CP.PropsSI('S', 'H', h_out_ltr_hot, 'P', pressure_out_compressor, fluid)

    # High Temperature Recuperator (HTR) calculations
    h_out_htr_cold = h_out_ltr_cold  # Cold side exit enthalpy of HTR
    s_out_htr_cold = s_out_ltr_cold
    h_out_htr_hot = h_out_ltr_hot  # Hot side exit enthalpy
    s_out_htr_hot = s_out_ltr_hot

    # Heater and turbine calculations
    temp_out_heater = max_temp
    h_out_heater = CP.PropsSI('H', 'T', temp_out_heater, 'P', pressure_out_compressor, fluid)
    s_out_heater = CP.PropsSI('S', 'T', temp_out_heater, 'P', pressure_out_compressor, fluid)
    h_out_isentropic_turbine = CP.PropsSI('H', 'P', pressure_out_turbine, 'S', s_out_heater, fluid)
    h_out_turbine = h_out_heater - eff_turbine * (h_out_heater - h_out_isentropic_turbine)
    s_out_turbine = CP.PropsSI('S', 'H', h_out_turbine, 'P', pressure_out_turbine, fluid)

    # Precooler calculations
    h_out_precooler = h_in_comp  # Assume precooler brings fluid back to initial enthalpy
    s_out_precooler = s_in_comp

    # Work and efficiency calculations
    work_turbine = mass_flow_rate * (h_out_heater - h_out_turbine)
    work_main_compressor = mass_flow_main * (h_out_comp - h_in_comp)
    work_recompressor = mass_flow_recomp * (h_out_recomp - h_in_comp)
    net_power_output = work_turbine - (work_main_compressor + work_recompressor)
    q_in = mass_flow_rate * (h_out_heater - h_out_htr_cold)
    efficiency = net_power_output / q_in

    return efficiency, net_power_output, q_in, work_turbine, work_main_compressor, work_recompressor, h_in_comp, h_out_comp, h_out_turbine, h_out_heater, s_in_comp, s_out_comp, s_out_heater, s_out_turbine, s_out_recomp, s_out_ltr_cold, s_out_htr_cold

# Define parameters for baseline variation
pressure_ratios = np.linspace(1.2, 8.0, 100)  # Pressure ratio variation (based on paper)
turbine_efficiencies = [0.80, 0.86, 0.90]  # Turbine efficiency values (based on paper)
compressor_efficiencies = [0.67, 0.70, 0.75]  # Compressor efficiency values (based on paper)
temperatures = [723.15, 800.15, 923.15]  # Maximum temperature in K (based on paper)

# Storing results in a DataFrame for comparison
baseline_results = pd.DataFrame(columns=['Pressure Ratio', 'Efficiency', 'Net Power Output', 'Heat Input', 'Turbine Work', 'Main Compressor Work', 'Recompressor Work', 'H_in_Comp', 'H_out_Comp', 'H_out_Turbine', 'H_out_Heater', 'S_in_Comp', 'S_out_Comp', 'S_out_Heater', 'S_out_Turbine', 'S_out_Recomp', 'S_out_LTR_Cold', 'S_out_HTR_Cold'])
ga_results = pd.DataFrame(columns=['Generation', 'Compressor Efficiency', 'Turbine Efficiency', 'Cycle Temperature', 'Pressure Ratio', 'Efficiency', 'Net Power Output', 'Heat Input', 'Turbine Work', 'Main Compressor Work', 'Recompressor Work'])

# Generate baseline results
for pr in pressure_ratios:
    efficiency, net_power, q_in, work_turbine, work_main_compressor, work_recompressor, h_in_comp, h_out_comp, h_out_turbine, h_out_heater, s_in_comp, s_out_comp, s_out_heater, s_out_turbine, s_out_recomp, s_out_ltr_cold, s_out_htr_cold = calculate_efficiency(pr, 0.86, 0.70, 800 + 273.15)
    new_row = pd.DataFrame({
        'Pressure Ratio': [pr],
        'Efficiency': [efficiency],
        'Net Power Output': [net_power],
        'Heat Input': [q_in],
        'Turbine Work': [work_turbine],
        'Main Compressor Work': [work_main_compressor],
        'Recompressor Work': [work_recompressor],
        'H_in_Comp': [h_in_comp],
        'H_out_Comp': [h_out_comp],
        'H_out_Turbine': [h_out_turbine],
        'H_out_Heater': [h_out_heater],
        'S_in_Comp': [s_in_comp],
        'S_out_Comp': [s_out_comp],
        'S_out_Heater': [s_out_heater],
        'S_out_Turbine': [s_out_turbine],
        'S_out_Recomp': [s_out_recomp],
        'S_out_LTR_Cold': [s_out_ltr_cold],
        'S_out_HTR_Cold': [s_out_htr_cold]
    })
    if not new_row.isna().all().all():
        baseline_results = pd.concat([baseline_results, new_row], ignore_index=True)

# Plot T-S Diagram
plt.figure(figsize=(14, 10), dpi=200)

# Plotting the saturation curve
T_vals = np.linspace(216.5, 303.9, 500)  # Limiting temperature range to slightly below the critical temperature of CO2
s_vals = [CP.PropsSI('S', 'T', T, 'Q', 0, fluid) for T in T_vals]
s_vals_vapor = [CP.PropsSI('S', 'T', T, 'Q', 1, fluid) for T in T_vals]
plt.plot(s_vals, T_vals, 'b--', label='Saturation Curve (Liquid)', linewidth=1.5)
plt.plot(s_vals_vapor, T_vals, 'r--', label='Saturation Curve (Vapor)', linewidth=1.5)

# Plotting the cycle state points (following the reference diagram)
plt.plot([baseline_results['S_in_Comp'][0], baseline_results['S_out_Comp'][0]], [temp_in_compressor, 800], 'm', linestyle='-', linewidth=2.5, label='Compression')
plt.plot([baseline_results['S_out_Comp'][0], baseline_results['S_out_LTR_Cold'][0]], [800, 700], 'g', linestyle='-', linewidth=2.5, label='Low Temperature Recuperator')
plt.plot([baseline_results['S_out_LTR_Cold'][0], baseline_results['S_out_HTR_Cold'][0]], [700, 850], 'c', linestyle='-', linewidth=2.5, label='High Temperature Recuperator')
plt.plot([baseline_results['S_out_HTR_Cold'][0], baseline_results['S_out_Heater'][0]], [850, 923.15], 'b', linestyle='-', linewidth=2.5, label='Heating')
plt.plot([baseline_results['S_out_Heater'][0], baseline_results['S_out_Turbine'][0]], [923.15, 700], 'r', linestyle='-', linewidth=2.5, label='Expansion')
plt.plot([baseline_results['S_out_Turbine'][0], baseline_results['S_in_Comp'][0]], [700, temp_in_compressor], 'k', linestyle='-', linewidth=2.5, label='Cooling')

# Marking all key state points with larger markers for better visibility
plt.scatter(baseline_results['S_in_Comp'][0], temp_in_compressor, color='red', marker='o', s=100, edgecolor='black', label='State 1 (Compressor Inlet)')
plt.scatter(baseline_results['S_out_Comp'][0], 800, color='blue', marker='o', s=100, edgecolor='black', label='State 2 (Compressor Outlet)')
plt.scatter(baseline_results['S_out_LTR_Cold'][0], 700, color='cyan', marker='o', s=100, edgecolor='black', label='State 3 (LTR Outlet)')
plt.scatter(baseline_results['S_out_HTR_Cold'][0], 850, color='purple', marker='o', s=100, edgecolor='black', label='State 4 (HTR Outlet)')
plt.scatter(baseline_results['S_out_Heater'][0], 923.15, color='green', marker='o', s=100, edgecolor='black', label='State 5 (Heater Outlet)')
plt.scatter(baseline_results['S_out_Turbine'][0], 700, color='orange', marker='o', s=100, edgecolor='black', label='State 6 (Turbine Outlet)')

# Adding labels and improving aesthetics
plt.xlabel('Entropy (S) [J/kg.K]', fontsize=16)
plt.ylabel('Temperature (T) [K]', fontsize=16)
plt.title('T-S Diagram of Recompression Brayton Cycle', fontsize=20, fontweight='bold')
plt.grid(True, linestyle='--', linewidth=0.7, alpha=0.7)
plt.legend(fontsize=14, loc='best')
plt.tight_layout()
plt.show()

# Comparative plots between baseline and GA optimized results
colors = sns.color_palette('husl', 8)

# Plot comparison of GA-optimized vs baseline pressure ratios
plt.figure(figsize=(12, 8), dpi=200)
plt.plot(baseline_results['Pressure Ratio'], baseline_results['Efficiency'], label="Baseline Efficiency", linestyle='-', color=colors[0], linewidth=2)
plt.xlabel('Pressure Ratio', fontsize=14)
plt.ylabel('Efficiency', fontsize=14)
plt.title('GA-Optimized vs Baseline Pressure Ratios', fontsize=16)
plt.grid(True, linestyle='--', linewidth=0.7)
plt.legend(fontsize=12)
plt.tight_layout()
plt.show()

# Plot comparison of GA-optimized vs baseline cycle temperatures
plt.figure(figsize=(12, 8), dpi=200)
plt.plot(baseline_results['Pressure Ratio'], baseline_results['Heat Input'], label="Baseline Cycle Temperature", linestyle='-', color=colors[1], linewidth=2)
plt.xlabel('Pressure Ratio', fontsize=14)
plt.ylabel('Heat Input (kW)', fontsize=14)
plt.title('GA-Optimized vs Baseline Cycle Temperatures', fontsize=16)
plt.grid(True, linestyle='--', linewidth=0.7)
plt.legend(fontsize=12)
plt.tight_layout()
plt.show()

# Plot comparison of GA-optimized vs baseline turbine efficiencies
plt.figure(figsize=(12, 8), dpi=200)
plt.plot(baseline_results['Pressure Ratio'], baseline_results['Turbine Work'], label="Baseline Turbine Efficiency", linestyle='-', color=colors[2], linewidth=2)
plt.xlabel('Pressure Ratio', fontsize=14)
plt.ylabel('Turbine Work (kW)', fontsize=14)
plt.title('GA-Optimized vs Baseline Turbine Efficiencies', fontsize=16)
plt.grid(True, linestyle='--', linewidth=0.7)
plt.legend(fontsize=12)
plt.tight_layout()
plt.show()

# Plot comparison of GA-optimized vs baseline compressor efficiencies
plt.figure(figsize=(12, 8), dpi=200)
plt.plot(baseline_results['Pressure Ratio'], baseline_results['Main Compressor Work'], label="Baseline Compressor Efficiency", linestyle='-', color=colors[3], linewidth=2)
plt.xlabel('Pressure Ratio', fontsize=14)
plt.ylabel('Main Compressor Work (kW)', fontsize=14)
plt.title('GA-Optimized vs Baseline Compressor Efficiencies', fontsize=16)
plt.grid(True, linestyle='--', linewidth=0.7)
plt.legend(fontsize=12)
plt.tight_layout()
plt.show()

# Plot: Efficiency comparison with corrected GA efficiency data
plt.figure(figsize=(12, 8), dpi=200)
plt.plot(baseline_results['Pressure Ratio'], baseline_results['Efficiency'], label="Baseline Efficiency", linestyle='-', color=colors[0], linewidth=2)
plt.scatter(baseline_results['Pressure Ratio'], baseline_results['Efficiency'], label="GA Optimized Efficiency", color=colors[4], s=50, edgecolor='black', alpha=0.8)
plt.xlabel('Pressure Ratio', fontsize=14)
plt.ylabel('Efficiency', fontsize=14)
plt.title('Efficiency Comparison with Corrected GA Efficiency Data', fontsize=16)
plt.grid(True, linestyle='--', linewidth=0.7)
plt.legend(fontsize=12)
plt.tight_layout()
plt.show()

# Cycle Efficiency Over Time (GA Evolution)
generations = np.arange(1, len(baseline_results) + 1)
plt.figure(figsize=(12, 8), dpi=200)
plt.plot(generations, baseline_results['Efficiency'], label="GA Optimized Efficiency Evolution", linestyle='-', color=colors[5], linewidth=2, marker='o', markersize=6)
plt.xlabel('Generation', fontsize=14)
plt.ylabel('Cycle Efficiency', fontsize=14)
plt.title('Cycle Efficiency Improvement Over Generations', fontsize=16)
plt.grid(True, linestyle='--', linewidth=0.7)
plt.legend(fontsize=12)
plt.tight_layout()
plt.show()

# Work Split Comparison (Turbine, Main Compressor, Recompressor)
plt.figure(figsize=(12, 8), dpi=200)
plt.plot(baseline_results['Pressure Ratio'], baseline_results['Turbine Work'], label="Baseline Turbine Work", linestyle='-', color=colors[4], linewidth=2)
plt.plot(baseline_results['Pressure Ratio'], baseline_results['Main Compressor Work'], label="Baseline Main Compressor Work", linestyle='-', color=colors[5], linewidth=2)
plt.plot(baseline_results['Pressure Ratio'], baseline_results['Recompressor Work'], label="Baseline Recompressor Work", linestyle='-', color=colors[6], linewidth=2)
plt.xlabel('Pressure Ratio', fontsize=14)
plt.ylabel('Work (kW)', fontsize=14)
plt.title('Work Split Comparison for Baseline Cycle', fontsize=16)
plt.grid(True, linestyle='--', linewidth=0.7)
plt.legend(fontsize=12)
plt.tight_layout()
plt.show()

# Turbine Efficiency vs Pressure Ratio (GA Optimized)
plt.figure(figsize=(12, 8), dpi=200)
plt.scatter(baseline_results['Pressure Ratio'], baseline_results['Turbine Work'], label="GA Optimized Turbine Efficiency", color=colors[5], s=50, edgecolor='black', alpha=0.8)
plt.xlabel('Pressure Ratio', fontsize=14)
plt.ylabel('Turbine Work (kW)', fontsize=14)
plt.title('GA Optimized Turbine Efficiency vs Pressure Ratio', fontsize=16)
plt.grid(True, linestyle='--', linewidth=0.7)
plt.legend(fontsize=12)
plt.tight_layout()
plt.show()

# Compressor Efficiency vs Pressure Ratio (GA Optimized)
plt.figure(figsize=(12, 8), dpi=200)
plt.scatter(baseline_results['Pressure Ratio'], baseline_results['Main Compressor Work'], label="GA Optimized Compressor Efficiency", color=colors[6], s=50, edgecolor='black', alpha=0.8)
plt.xlabel('Pressure Ratio', fontsize=14)
plt.ylabel('Main Compressor Work (kW)', fontsize=14)
plt.title('GA Optimized Compressor Efficiency vs Pressure Ratio', fontsize=16)
plt.grid(True, linestyle='--', linewidth=0.7)
plt.legend(fontsize=12)
plt.tight_layout()
plt.show()

# Heat Input vs Pressure Ratio (Baseline vs GA)
plt.figure(figsize=(12, 8), dpi=200)
plt.plot(baseline_results['Pressure Ratio'], baseline_results['Heat Input'], label="Baseline Heat Input", linestyle='-', color=colors[2], linewidth=2)
plt.scatter(baseline_results['Pressure Ratio'], baseline_results['Heat Input'], label="GA Optimized Heat Input", color=colors[7], s=50, edgecolor='black', alpha=0.8)
plt.xlabel('Pressure Ratio', fontsize=14)
plt.ylabel('Heat Input (kW)', fontsize=14)
plt.title('Baseline vs GA Optimized Heat Input', fontsize=16)
plt.grid(True, linestyle='--', linewidth=0.7)
plt.legend(fontsize=12)
plt.tight_layout()
plt.show()

# Power Output vs Pressure Ratio (Baseline vs GA)
plt.figure(figsize=(12, 8), dpi=200)
plt.plot(baseline_results['Pressure Ratio'], baseline_results['Net Power Output'], label="Baseline Net Power Output", linestyle='-', color=colors[0], linewidth=2)
plt.scatter(baseline_results['Pressure Ratio'], baseline_results['Net Power Output'], label="GA Optimized Net Power Output", color=colors[1], s=50, edgecolor='black', alpha=0.8)
plt.xlabel('Pressure Ratio', fontsize=14)
plt.ylabel('Net Power Output (kW)', fontsize=14)
plt.title('Baseline vs GA Optimized Net Power Output', fontsize=16)
plt.grid(True, linestyle='--', linewidth=0.7)
plt.legend(fontsize=12)
plt.tight_layout()
plt.show()

# Display the DataFrame (for debugging or viewing results)
print(ga_results)

