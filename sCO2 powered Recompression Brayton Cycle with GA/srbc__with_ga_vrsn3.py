# -*- coding: utf-8 -*-
"""srbc _with_ga_vrsn3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MUsCDiWEb1CMXfb0zIjeGy7FTjNqNDfl
"""

pip install CoolProp pygad matplotlib pandas

import CoolProp.CoolProp as CP
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import pygad

# Constants
mass_flow_rate_cycle = 93.2  # kg/s
gas_cooler_temp_out = 305.4  # K
gas_cooler_pressure_out = 7700  # kPa
turbine_pressure_out = 7855  # kPa
ht_recuperator_temp_out = 479.1  # K
losses = 0.07

# Function to calculate thermal efficiency
def calculate_efficiency(pressure_ratio, eff_turbine, eff_compressor, max_temp):
    fluid = 'CO2'
    primary_hx_temp_out = max_temp
    primary_hx_pressure = gas_cooler_pressure_out * pressure_ratio

    # Compressor inlet state (Point 1)
    T_inlet_compressor = gas_cooler_temp_out
    P_inlet_compressor = gas_cooler_pressure_out
    h_inlet_compressor = CP.PropsSI('H', 'T', T_inlet_compressor, 'P', P_inlet_compressor * 1000, fluid)
    s_inlet_compressor = CP.PropsSI('S', 'T', T_inlet_compressor, 'P', P_inlet_compressor * 1000, fluid)

    # Compressor outlet state (Point 2)
    P_out_compressor = P_inlet_compressor * pressure_ratio
    h_out_isentropic_compressor = CP.PropsSI('H', 'P', P_out_compressor * 1000, 'S', s_inlet_compressor, fluid)
    h_out_actual_compressor = h_inlet_compressor + (h_out_isentropic_compressor - h_inlet_compressor) / eff_compressor
    T_out_compressor = CP.PropsSI('T', 'H', h_out_actual_compressor, 'P', P_out_compressor * 1000, fluid)

    # HT recuperator outlet state (Point 4)
    T_out_ht_recuperator_high = ht_recuperator_temp_out
    P_out_ht_recuperator_high = primary_hx_pressure
    h_out_ht_recuperator_high = CP.PropsSI('H', 'T', T_out_ht_recuperator_high, 'P', P_out_ht_recuperator_high * 1000, fluid)

    # Heater outlet state (Point 5)
    T_out_heater = primary_hx_temp_out
    h_out_heater = CP.PropsSI('H', 'T', T_out_heater, 'P', primary_hx_pressure * 1000, fluid)

    # Turbine outlet state (Point 6)
    P_out_turbine = turbine_pressure_out
    h_out_isentropic_turbine = CP.PropsSI('H', 'P', P_out_turbine * 1000, 'S', CP.PropsSI('S', 'H', h_out_heater, 'P', primary_hx_pressure * 1000, fluid), fluid)
    h_out_actual_turbine = h_out_heater - eff_turbine * (h_out_heater - h_out_isentropic_turbine)
    T_out_turbine = CP.PropsSI('T', 'H', h_out_actual_turbine, 'P', P_out_turbine * 1000, fluid)

    # Overall cycle efficiency
    W_turbine = mass_flow_rate_cycle * (h_out_heater - h_out_actual_turbine)
    W_comp = mass_flow_rate_cycle * (h_out_actual_compressor - h_inlet_compressor)
    Q_in = mass_flow_rate_cycle * (h_out_heater - h_out_ht_recuperator_high)

    net_power_output = (W_turbine - W_comp) * (1 - losses)
    thermal_efficiency = net_power_output / Q_in

    return thermal_efficiency, net_power_output, Q_in, W_turbine, W_comp

# Define simplified baseline values
baseline_compressor_efficiencies = [0.75, 0.80, 0.85]  # Fixed compressor efficiencies
baseline_turbine_efficiencies = [0.80, 0.85, 0.90]  # Fixed turbine efficiencies
baseline_temperatures = [500 + 273.15, 600 + 273.15, 700 + 273.15, 800 + 273.15]  # Selected temperatures in Kelvin
baseline_pressure_ratios = np.linspace(2.0, 10.0, 100)  # Selected pressure ratios
colors = ['red', 'green', 'orange', 'purple', 'brown']  # Color palette for better differentiation

# DataFrames to store results
compressor_efficiency_results = []
turbine_efficiency_results = []
temperature_results = []

# Calculate and store Compressor Efficiency Results
for eff_compressor in baseline_compressor_efficiencies:
    for temp in baseline_temperatures:
        for pr in baseline_pressure_ratios:
            eff, net_power, heat_in, work_turbine, work_compressor = calculate_efficiency(pr, 0.85, eff_compressor, temp)
            compressor_efficiency_results.append([temp - 273.15, pr, eff_compressor, eff, net_power, heat_in, work_turbine, work_compressor])
compressor_efficiency_df = pd.DataFrame(compressor_efficiency_results, columns=["Temp (°C)", "Pressure Ratio", "Compressor Eff", "Thermal Eff", "Net Power Output", "Heat In", "Work Turbine", "Work Compressor"])
print("Compressor Efficiency Results:")
print(compressor_efficiency_df)

# Calculate and store Turbine Efficiency Results
for eff_turbine in baseline_turbine_efficiencies:
    for temp in baseline_temperatures:
        for pr in baseline_pressure_ratios:
            eff, net_power, heat_in, work_turbine, work_compressor = calculate_efficiency(pr, eff_turbine, 0.85, temp)
            turbine_efficiency_results.append([temp - 273.15, pr, eff_turbine, eff, net_power, heat_in, work_turbine, work_compressor])
turbine_efficiency_df = pd.DataFrame(turbine_efficiency_results, columns=["Temp (°C)", "Pressure Ratio", "Turbine Eff", "Thermal Eff", "Net Power Output", "Heat In", "Work Turbine", "Work Compressor"])
print("Turbine Efficiency Results:")
print(turbine_efficiency_df)

# Calculate and store Temperature Results
for temp in baseline_temperatures:
    for pr in baseline_pressure_ratios:
        eff, net_power, heat_in, work_turbine, work_compressor = calculate_efficiency(pr, 0.85, 0.85, temp)
        temperature_results.append([temp - 273.15, pr, eff, net_power, heat_in, work_turbine, work_compressor])
temperature_df = pd.DataFrame(temperature_results, columns=["Temp (°C)", "Pressure Ratio", "Thermal Eff", "Net Power Output", "Heat In", "Work Turbine", "Work Compressor"])
print("Temperature Results:")
print(temperature_df)

# Plot Effect of Compressor Efficiency on Thermal Efficiency
plt.figure(figsize=(8, 6), dpi=150)
for idx, eff_compressor in enumerate(baseline_compressor_efficiencies):
    thermal_efficiencies = []
    for pr in baseline_pressure_ratios:
        eff, _, _, _, _ = calculate_efficiency(pr, 0.85, eff_compressor, 800 + 273.15)
        thermal_efficiencies.append(eff)
    plt.plot(baseline_pressure_ratios, thermal_efficiencies, label=f"Compressor Efficiency = {eff_compressor}", color=colors[idx % len(colors)])
plt.xlabel('Pressure Ratio')
plt.ylabel('Thermal Efficiency')
plt.title('Effect of Compressor Efficiency on Thermal Efficiency')
plt.legend()
plt.grid(True)
plt.show()

# Plot Effect of Turbine Efficiency on Thermal Efficiency
plt.figure(figsize=(8, 6), dpi=150)
for idx, eff_turbine in enumerate(baseline_turbine_efficiencies):
    thermal_efficiencies = []
    for pr in baseline_pressure_ratios:
        eff, _, _, _, _ = calculate_efficiency(pr, eff_turbine, 0.85, 800 + 273.15)
        thermal_efficiencies.append(eff)
    plt.plot(baseline_pressure_ratios, thermal_efficiencies, label=f"Turbine Efficiency = {eff_turbine}", color=colors[idx % len(colors)])
plt.xlabel('Pressure Ratio')
plt.ylabel('Thermal Efficiency')
plt.title('Effect of Turbine Efficiency on Thermal Efficiency')
plt.legend()
plt.grid(True)
plt.show()

# Plot Effect of Cycle Temperature on Thermal Efficiency
plt.figure(figsize=(8, 6), dpi=150)
for idx, temp in enumerate(baseline_temperatures):
    thermal_efficiencies = []
    for pr in baseline_pressure_ratios:
        eff, _, _, _, _ = calculate_efficiency(pr, 0.85, 0.85, temp)
        thermal_efficiencies.append(eff)
    plt.plot(baseline_pressure_ratios, thermal_efficiencies, label=f"Temperature = {temp - 273.15} °C", color=colors[idx % len(colors)])
plt.xlabel('Pressure Ratio')
plt.ylabel('Thermal Efficiency')
plt.title('Effect of Cycle Temperature on Thermal Efficiency')
plt.legend()
plt.grid(True)
plt.show()

# Store GA-optimized values from each generation
best_compressor_efficiencies = []
best_turbine_efficiencies = []
best_cycle_temperatures = []
best_pressure_ratios = []

# GA Optimization Callback to track best solutions across generations
def on_generation(ga_instance):
    best_solution, best_solution_fitness, _ = ga_instance.best_solution()
    best_turbine_efficiency, best_compressor_efficiency, best_pressure_ratio, best_max_temp = best_solution

    # Store the best values from this generation
    best_compressor_efficiencies.append(best_compressor_efficiency)
    best_turbine_efficiencies.append(best_turbine_efficiency)
    best_cycle_temperatures.append(best_max_temp - 273.15)  # Convert temperature to Celsius
    best_pressure_ratios.append(best_pressure_ratio)

    print(f"Generation {ga_instance.generations_completed}: Best Fitness = {best_solution_fitness}")

# Fitness function for GA
def fitness_function(ga_instance, solution, solution_idx):
    eff_turbine, eff_compressor, pressure_ratio, max_temp = solution
    efficiency, _, _, _, _ = calculate_efficiency(pressure_ratio, eff_turbine, eff_compressor, max_temp)
    return efficiency

# Set up GA
ga_instance = pygad.GA(
    num_generations=50,  # Number of generations for the GA
    num_parents_mating=5,
    fitness_func=fitness_function,
    sol_per_pop=20,
    num_genes=4,
    gene_space=[
        {'low': 0.7, 'high': 0.95},  # Turbine Efficiency
        {'low': 0.7, 'high': 0.95},  # Compressor Efficiency
        {'low': 2.0, 'high': 10.0},  # Pressure Ratio
        {'low': 773.15, 'high': 1073.15}  # Maximum Temperature (500°C to 800°C)
    ],
    parent_selection_type="sss",
    crossover_type="single_point",
    mutation_type="random",
    mutation_percent_genes=25,
    on_generation=on_generation  # Call the callback function after each generation
)

# Run GA optimization
ga_instance.run()

# Extend baseline values across generations for comparison
generations = np.arange(1, 51)

# Plot comparison of GA-optimized vs baseline compressor efficiencies
plt.figure(figsize=(10, 6), dpi=150)
plt.plot(generations, best_compressor_efficiencies, label="GA Optimized Compressor Efficiencies", marker='o', linestyle='-', color='blue', markersize=6, linewidth=2)
for idx, baseline_values in enumerate(baseline_compressor_efficiencies):
    plt.axhline(y=baseline_values, label=f"Baseline Compressor Eff = {baseline_values}", linestyle='--', color=colors[idx % len(colors)], linewidth=2)
plt.xlabel('Generation', fontsize=12)
plt.ylabel('Compressor Efficiency', fontsize=12)
plt.title('GA Optimized vs Baseline Compressor Efficiencies', fontsize=14)
plt.grid(True, which='both', linestyle='--', linewidth=0.5)
plt.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=10)  # Legend outside plot
plt.tight_layout()
plt.show()

# Plot comparison of GA-optimized vs baseline turbine efficiencies
plt.figure(figsize=(10, 6), dpi=150)
plt.plot(generations, best_turbine_efficiencies, label="GA Optimized Turbine Efficiencies", marker='o', linestyle='-', color='blue', markersize=6, linewidth=2)
for idx, baseline_values in enumerate(baseline_turbine_efficiencies):
    plt.axhline(y=baseline_values, label=f"Baseline Turbine Eff = {baseline_values}", linestyle='--', color=colors[idx % len(colors)], linewidth=2)
plt.xlabel('Generation', fontsize=12)
plt.ylabel('Turbine Efficiency', fontsize=12)
plt.title('GA Optimized vs Baseline Turbine Efficiencies', fontsize=14)
plt.grid(True, which='both', linestyle='--', linewidth=0.5)
plt.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=10)  # Legend outside plot
plt.tight_layout()
plt.show()

# Plot comparison of GA-optimized vs baseline cycle temperatures
plt.figure(figsize=(10, 6), dpi=150)
plt.plot(generations, best_cycle_temperatures, label="GA Optimized Cycle Temperatures", marker='o', linestyle='-', color='blue', markersize=6, linewidth=2)
for idx, baseline_values in enumerate(baseline_temperatures):
    plt.axhline(y=baseline_values - 273.15, label=f"Baseline Temp = {baseline_values - 273.15} °C", linestyle='--', color=colors[idx % len(colors)], linewidth=2)
plt.xlabel('Generation', fontsize=12)
plt.ylabel('Cycle Temperature (°C)', fontsize=12)
plt.title('GA Optimized vs Baseline Cycle Temperatures', fontsize=14)
plt.grid(True, which='both', linestyle='--', linewidth=0.5)
plt.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=10)  # Legend outside plot
plt.tight_layout()
plt.show()

# Plot comparison of GA-optimized vs baseline pressure ratios
plt.figure(figsize=(10, 6), dpi=150)
plt.plot(generations, best_pressure_ratios, label="GA Optimized Pressure Ratios", marker='o', linestyle='-', color='blue', markersize=6, linewidth=2)
for idx, baseline_values in enumerate([2.0, 6.0, 10.0]):
    plt.axhline(y=baseline_values, label=f"Baseline Pressure Ratio = {baseline_values}", linestyle='--', color=colors[idx % len(colors)], linewidth=2)
plt.xlabel('Generation', fontsize=12)
plt.ylabel('Pressure Ratio', fontsize=12)
plt.title('GA Optimized vs Baseline Pressure Ratios', fontsize=14)
plt.grid(True, which='both', linestyle='--', linewidth=0.5)
plt.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=10)  # Legend outside plot
plt.tight_layout()
plt.show()

