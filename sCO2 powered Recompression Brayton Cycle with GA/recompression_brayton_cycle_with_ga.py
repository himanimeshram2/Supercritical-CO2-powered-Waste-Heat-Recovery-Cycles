# -*- coding: utf-8 -*-
"""Recompression Brayton Cycle with GA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13Rs7GYsLCb6byFDHJwKX7Y68AeGEyLOu
"""

pip install CoolProp pygad ace pymoo

import CoolProp.CoolProp as CP
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import pygad
import seaborn as sns
import time
import warnings

# To Suppress non-critical warnings
warnings.filterwarnings('ignore')

# Constants
mass_flow_rate = 5.77  # kg/s (based on paper)
fluid = 'CO2'
pressure_in_compressor = 7.7e6  # Pa (Initial compressor inlet pressure)
pressure_out_turbine = 7.78e6  # Pa (Turbine outlet pressure)
temp_in_compressor = 305.15  # K (Compressor inlet temperature)
split_ratio = 0.6  # Split ratio between main compressor and recompressor

sns.set(style='whitegrid')

# Function to calculate thermodynamic properties and cycle performance
def calculate_efficiency(pressure_ratio, eff_turbine, eff_compressor, max_temp):
    # Main Compressor calculations
    h_in_comp = CP.PropsSI('H', 'T', temp_in_compressor, 'P', pressure_in_compressor, fluid)
    s_in_comp = CP.PropsSI('S', 'T', temp_in_compressor, 'P', pressure_in_compressor, fluid)
    pressure_out_compressor = pressure_in_compressor * pressure_ratio
    h_out_isentropic_comp = CP.PropsSI('H', 'P', pressure_out_compressor, 'S', s_in_comp, fluid)
    h_out_comp = h_in_comp + (h_out_isentropic_comp - h_in_comp) / eff_compressor

    # Split mass flow for recompression
    mass_flow_main = mass_flow_rate * split_ratio
    mass_flow_recomp = mass_flow_rate * (1 - split_ratio)

    # Recompressor calculations
    h_out_recomp = h_out_comp  # Assume same outlet enthalpy as main compressor for simplification

    # Low Temperature Recuperator (LTR) calculations
    h_out_ltr_cold = h_out_comp  # Cold side exit enthalpy of LTR
    h_out_ltr_hot = CP.PropsSI('H', 'P', pressure_out_compressor, 'S', s_in_comp, fluid)  # Hot side exit enthalpy

    # High Temperature Recuperator (HTR) calculations
    h_out_htr_cold = h_out_ltr_cold  # Cold side exit enthalpy of HTR
    h_out_htr_hot = h_out_ltr_hot  # Hot side exit enthalpy

    # Heater and turbine calculations
    temp_out_heater = max_temp
    h_out_heater = CP.PropsSI('H', 'T', temp_out_heater, 'P', pressure_out_compressor, fluid)
    s_out_heater = CP.PropsSI('S', 'T', temp_out_heater, 'P', pressure_out_compressor, fluid)
    h_out_isentropic_turbine = CP.PropsSI('H', 'P', pressure_out_turbine, 'S', s_out_heater, fluid)
    h_out_turbine = h_out_heater - eff_turbine * (h_out_heater - h_out_isentropic_turbine)

    # Precooler calculations
    h_out_precooler = h_in_comp  # Assume precooler brings fluid back to initial enthalpy

    # Work and efficiency calculations
    work_turbine = mass_flow_rate * (h_out_heater - h_out_turbine)
    work_main_compressor = mass_flow_main * (h_out_comp - h_in_comp)
    work_recompressor = mass_flow_recomp * (h_out_recomp - h_in_comp)
    net_power_output = work_turbine - (work_main_compressor + work_recompressor)
    q_in = mass_flow_rate * (h_out_heater - h_out_htr_cold)
    efficiency = net_power_output / q_in

    return efficiency, net_power_output, q_in, work_turbine, work_main_compressor, work_recompressor, h_in_comp, h_out_comp, h_out_turbine, h_out_heater

# Define parameters for baseline variation
pressure_ratios = np.linspace(1.2, 8.0, 100)  # Pressure ratio variation ( based on paper)
turbine_efficiencies = [0.80, 0.86, 0.90]  # Turbine efficiency values ( based on paper)
compressor_efficiencies = [0.67, 0.70, 0.75]  # Compressor efficiency values ( based on paper)
temperatures = [723.15, 800.15, 923.15]  # Maximum temperature in K ( based on paper)

# Storing results in a DataFrame for comparison
baseline_results = pd.DataFrame(columns=['Pressure Ratio', 'Efficiency', 'Net Power Output', 'Heat Input', 'Turbine Work', 'Main Compressor Work', 'Recompressor Work', 'H_in_Comp', 'H_out_Comp', 'H_out_Turbine', 'H_out_Heater'])
ga_results = pd.DataFrame(columns=['Generation', 'Compressor Efficiency', 'Turbine Efficiency', 'Cycle Temperature', 'Pressure Ratio', 'Efficiency', 'Net Power Output', 'Heat Input', 'Turbine Work', 'Main Compressor Work', 'Recompressor Work'])

# Generate baseline results
for pr in pressure_ratios:
    efficiency, net_power, q_in, work_turbine, work_main_compressor, work_recompressor, h_in_comp, h_out_comp, h_out_turbine, h_out_heater = calculate_efficiency(pr, 0.86, 0.70, 800 + 273.15)
    new_row = pd.DataFrame({
        'Pressure Ratio': [pr],
        'Efficiency': [efficiency],
        'Net Power Output': [net_power],
        'Heat Input': [q_in],
        'Turbine Work': [work_turbine],
        'Main Compressor Work': [work_main_compressor],
        'Recompressor Work': [work_recompressor],
        'H_in_Comp': [h_in_comp],
        'H_out_Comp': [h_out_comp],
        'H_out_Turbine': [h_out_turbine],
        'H_out_Heater': [h_out_heater]
    })
    if not new_row.isna().all().all():
        baseline_results = pd.concat([baseline_results, new_row], ignore_index=True)

# GA Optimization Callback to track best solutions across generations
best_compressor_efficiencies = []
best_turbine_efficiencies = []
best_cycle_temperatures = []
best_pressure_ratios = []
best_efficiencies = []
best_net_powers = []
best_heat_inputs = []
best_turbine_works = []
best_main_compressor_works = []
best_recompressor_works = []

def on_generation(ga_instance):
    best_solution, best_solution_fitness, _ = ga_instance.best_solution()
    best_turbine_efficiency, best_compressor_efficiency, best_pressure_ratio, best_max_temp = best_solution

    # Calculate efficiency for this best solution
    efficiency, net_power, q_in, work_turbine, work_main_compressor, work_recompressor, _, _, _, _ = calculate_efficiency(best_pressure_ratio, best_turbine_efficiency, best_compressor_efficiency, best_max_temp)
    best_efficiencies.append(efficiency)
    best_net_powers.append(net_power)
    best_heat_inputs.append(q_in)
    best_turbine_works.append(work_turbine)
    best_main_compressor_works.append(work_main_compressor)
    best_recompressor_works.append(work_recompressor)

    # Store the best values from this generation
    best_compressor_efficiencies.append(best_compressor_efficiency)
    best_turbine_efficiencies.append(best_turbine_efficiency)
    best_cycle_temperatures.append(best_max_temp - 273.15)  # Convert temperature to Celsius
    best_pressure_ratios.append(best_pressure_ratio)

    ga_results.loc[len(ga_results)] = [
        ga_instance.generations_completed, best_compressor_efficiency, best_turbine_efficiency, best_max_temp - 273.15, best_pressure_ratio,
        efficiency, net_power, q_in, work_turbine, work_main_compressor, work_recompressor
    ]
    print(f"Generation {ga_instance.generations_completed}: Best Fitness = {best_solution_fitness}")
    time.sleep(0.1)  # Add delay for better visualization

# Fitness function
def fitness_function(ga_instance, solution, solution_idx):
    eff_turbine, eff_compressor, pressure_ratio, max_temp = solution
    efficiency, _, _, _, _, _, _, _, _, _ = calculate_efficiency(pressure_ratio, eff_turbine, eff_compressor, max_temp)
    return efficiency

# Set up GA
ga_instance = pygad.GA(
    num_generations=100,  # Increase number of generations for better optimization
    num_parents_mating=5,
    fitness_func=fitness_function,
    sol_per_pop=30,  # Increase population size for better exploration
    num_genes=4,
    gene_space=[
        {'low': 0.7, 'high': 0.95},  # Turbine Efficiency
        {'low': 0.67, 'high': 0.75},  # Compressor Efficiency ( range based on paper)
        {'low': 1.2, 'high': 8.0},  # Expand pressure ratio range for better exploration ( based on paper)
        {'low': 723.15, 'high': 923.15}  # Maximum Temperature ( based on paper)
    ],
    mutation_percent_genes=10,  # Lower mutation rate to avoid random noise
    mutation_num_genes=1,  # Ensure at least one gene is mutated
    on_generation=on_generation
)

# Run GA optimization
ga_instance.run()

# Original Baseline Plots
# Plot 1: Thermal Efficiency vs Pressure Ratio for Different Turbine Efficiencies
plt.figure(figsize=(12, 8), dpi=200)
for eff_turbine in turbine_efficiencies:
    thermal_efficiencies = []
    for pr in pressure_ratios:
        eff, _, _, _, _, _, _, _, _, _ = calculate_efficiency(pr, eff_turbine, 0.70, 800 + 273.15)
        thermal_efficiencies.append(eff)
    plt.plot(pressure_ratios, thermal_efficiencies, label=f"Turbine Efficiency = {eff_turbine}", linestyle='-', linewidth=2)
plt.xlabel('Pressure Ratio', fontsize=14)
plt.ylabel('Thermal Efficiency', fontsize=14)
plt.title('Thermal Efficiency vs Pressure Ratio for Different Turbine Efficiencies', fontsize=16)
plt.grid(True, linestyle='--', linewidth=0.7)
plt.legend(fontsize=12)
plt.tight_layout()
plt.show()

# Plot 2: Thermal Efficiency vs Pressure Ratio for Different Compressor Efficiencies
plt.figure(figsize=(12, 8), dpi=200)
for eff_compressor in compressor_efficiencies:
    thermal_efficiencies = []
    for pr in pressure_ratios:
        eff, _, _, _, _, _, _, _, _, _ = calculate_efficiency(pr, 0.86, eff_compressor, 800 + 273.15)
        thermal_efficiencies.append(eff)
    plt.plot(pressure_ratios, thermal_efficiencies, label=f"Compressor Efficiency = {eff_compressor}", linestyle='-', linewidth=2)
plt.xlabel('Pressure Ratio', fontsize=14)
plt.ylabel('Thermal Efficiency', fontsize=14)
plt.title('Thermal Efficiency vs Pressure Ratio for Different Compressor Efficiencies', fontsize=16)
plt.grid(True, linestyle='--', linewidth=0.7)
plt.legend(fontsize=12)
plt.tight_layout()
plt.show()

# Plot 3: Thermal Efficiency vs Pressure Ratio for Different Maximum Temperatures
plt.figure(figsize=(12, 8), dpi=200)
for temp in temperatures:
    thermal_efficiencies = []
    for pr in pressure_ratios:
        eff, _, _, _, _, _, _, _, _, _ = calculate_efficiency(pr, 0.86, 0.70, temp)
        thermal_efficiencies.append(eff)
    plt.plot(pressure_ratios, thermal_efficiencies, label=f"Maximum Temperature = {temp - 273.15} °C", linestyle='-', linewidth=2)
plt.xlabel('Pressure Ratio', fontsize=14)
plt.ylabel('Thermal Efficiency', fontsize=14)
plt.title('Thermal Efficiency vs Pressure Ratio for Different Maximum Temperatures', fontsize=16)
plt.grid(True, linestyle='--', linewidth=0.7)
plt.legend(fontsize=12)
plt.tight_layout()
plt.show()

# Comparative plots between baseline and GA optimized results
colors = sns.color_palette('husl', 8)

# Plot 4: Power Output vs Pressure Ratio (Baseline vs GA)
plt.figure(figsize=(12, 8), dpi=200)
plt.plot(baseline_results['Pressure Ratio'], baseline_results['Net Power Output'], label="Baseline Net Power Output", linestyle='-', color=colors[0], linewidth=2)
plt.scatter(best_pressure_ratios, best_net_powers, label="GA Optimized Net Power Output", color=colors[1], s=50, edgecolor='black', alpha=0.8)
plt.xlabel('Pressure Ratio', fontsize=14)
plt.ylabel('Net Power Output (kW)', fontsize=14)
plt.title('Baseline vs GA Optimized Net Power Output', fontsize=16)
plt.grid(True, linestyle='--', linewidth=0.7)
plt.legend(fontsize=12)
plt.tight_layout()
plt.show()

# Plot 5: Heat Input vs Pressure Ratio (Baseline vs GA)
plt.figure(figsize=(12, 8), dpi=200)
plt.plot(baseline_results['Pressure Ratio'], baseline_results['Heat Input'], label="Baseline Heat Input", linestyle='-', color=colors[2], linewidth=2)
plt.scatter(best_pressure_ratios, best_heat_inputs, label="GA Optimized Heat Input", color=colors[3], s=50, edgecolor='black', alpha=0.8)
plt.xlabel('Pressure Ratio', fontsize=14)
plt.ylabel('Heat Input (kW)', fontsize=14)
plt.title('Baseline vs GA Optimized Heat Input', fontsize=16)
plt.grid(True, linestyle='--', linewidth=0.7)
plt.legend(fontsize=12)
plt.tight_layout()
plt.show()

# Plot 6: Work Split Comparison (Turbine, Main Compressor, Recompressor)
plt.figure(figsize=(12, 8), dpi=200)
plt.plot(baseline_results['Pressure Ratio'], baseline_results['Turbine Work'], label="Baseline Turbine Work", linestyle='-', color=colors[4], linewidth=2)
plt.plot(baseline_results['Pressure Ratio'], baseline_results['Main Compressor Work'], label="Baseline Main Compressor Work", linestyle='-', color=colors[5], linewidth=2)
plt.plot(baseline_results['Pressure Ratio'], baseline_results['Recompressor Work'], label="Baseline Recompressor Work", linestyle='-', color=colors[6], linewidth=2)
plt.xlabel('Pressure Ratio', fontsize=14)
plt.ylabel('Work (kW)', fontsize=14)
plt.title('Work Split Comparison for Baseline Cycle', fontsize=16)
plt.grid(True, linestyle='--', linewidth=0.7)
plt.legend(fontsize=12)
plt.tight_layout()
plt.show()

# Plot 7: Cycle Efficiency Over Time (GA Evolution)
generations = np.arange(1, len(best_efficiencies) + 1)
plt.figure(figsize=(12, 8), dpi=200)
plt.plot(generations, best_efficiencies, label="GA Optimized Efficiency Evolution", linestyle='-', color=colors[7], linewidth=2, marker='o', markersize=6)
plt.xlabel('Generation', fontsize=14)
plt.ylabel('Cycle Efficiency', fontsize=14)
plt.title('Cycle Efficiency Improvement Over Generations', fontsize=16)
plt.grid(True, linestyle='--', linewidth=0.7)
plt.legend(fontsize=12)
plt.tight_layout()
plt.show()

# Comparative Plot: Efficiency comparison with corrected GA efficiency data
plt.figure(figsize=(12, 8), dpi=200)
plt.plot(baseline_results['Pressure Ratio'], baseline_results['Efficiency'], label="Baseline Efficiency", linestyle='-', color=colors[0], linewidth=2)
plt.scatter(best_pressure_ratios, best_efficiencies, label="GA Optimized Efficiency", color=colors[1], s=50, edgecolor='black', alpha=0.8)
plt.xlabel('Pressure Ratio', fontsize=14)
plt.ylabel('Efficiency', fontsize=14)
plt.title('Baseline Efficiency vs GA Optimized Efficiency', fontsize=16)
plt.grid(True, linestyle='--', linewidth=0.7)
plt.legend(fontsize=12)
plt.tight_layout()
plt.show()

# Plot comparison of GA-optimized vs baseline compressor efficiencies
plt.figure(figsize=(12, 8), dpi=200)
plt.plot(generations, best_compressor_efficiencies, label="GA Optimized Compressor Efficiencies", marker='o', linestyle='-', color=colors[2], markersize=6, linewidth=2)
for idx, baseline_values in enumerate(compressor_efficiencies):
    plt.axhline(y=baseline_values, label=f"Baseline Compressor Eff = {baseline_values}", linestyle='--', color=colors[idx+3], linewidth=2)
plt.xlabel('Generation', fontsize=14)
plt.ylabel('Compressor Efficiency', fontsize=14)
plt.title('GA Optimized vs Baseline Compressor Efficiencies', fontsize=16)
plt.grid(True, which='both', linestyle='--', linewidth=0.7)
plt.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12)
plt.tight_layout()
plt.show()

# Plot comparison of GA-optimized vs baseline turbine efficiencies
plt.figure(figsize=(12, 8), dpi=200)
plt.plot(generations, best_turbine_efficiencies, label="GA Optimized Turbine Efficiencies", marker='o', linestyle='-', color=colors[3], markersize=6, linewidth=2)
for idx, baseline_values in enumerate(turbine_efficiencies):
    plt.axhline(y=baseline_values, label=f"Baseline Turbine Eff = {baseline_values}", linestyle='--', color=colors[idx+4], linewidth=2)
plt.xlabel('Generation', fontsize=14)
plt.ylabel('Turbine Efficiency', fontsize=14)
plt.title('GA Optimized vs Baseline Turbine Efficiencies', fontsize=16)
plt.grid(True, which='both', linestyle='--', linewidth=0.7)
plt.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12)
plt.tight_layout()
plt.show()

# Plot comparison of GA-optimized vs baseline cycle temperatures
plt.figure(figsize=(12, 8), dpi=200)
plt.plot(generations, best_cycle_temperatures, label="GA Optimized Cycle Temperatures", marker='o', linestyle='-', color=colors[4], markersize=6, linewidth=2)
for idx, baseline_values in enumerate(temperatures):
    plt.axhline(y=baseline_values - 273.15, label=f"Baseline Temp = {baseline_values - 273.15} °C", linestyle='--', color=colors[idx+5], linewidth=2)
plt.xlabel('Generation', fontsize=14)
plt.ylabel('Cycle Temperature (°C)', fontsize=14)
plt.title('GA Optimized vs Baseline Cycle Temperatures', fontsize=16)
plt.grid(True, which='both', linestyle='--', linewidth=0.7)
plt.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12)
plt.tight_layout()
plt.show()

# Plot comparison of GA-optimized vs baseline pressure ratios
plt.figure(figsize=(12, 8), dpi=200)
plt.plot(generations, best_pressure_ratios, label="GA Optimized Pressure Ratios", marker='o', linestyle='-', color=colors[5], markersize=6, linewidth=2)
plt.xlabel('Generation', fontsize=14)
plt.ylabel('Pressure Ratio', fontsize=14)
plt.title('GA Optimized vs Baseline Pressure Ratios', fontsize=16)
plt.grid(True, which='both', linestyle='--', linewidth=0.7)
plt.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12)
plt.tight_layout()
plt.show()

# Display the DataFrame (for debugging or viewing results)
print(ga_results)