# -*- coding: utf-8 -*-
"""sCO2_Nuclear_Cycle.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fXblm4v02tEkuAdzl5mjFzGQHqj_ZNpg
"""

pip install coolprop

import CoolProp.CoolProp as CP

# Define the parameters
heat_power = 18  # MWt
TT_in = 650 + 273.15  # Convert to Kelvin
TT_out = 514.4 + 273.15  # Convert to Kelvin
TC_in = 35 + 273.15  # Convert to Kelvin
TC_out = 69 + 273.15  # Convert to Kelvin
Twater_in = 20 + 273.15  # Convert to Kelvin
TRC_in = 206.9 + 273.15  # Convert to Kelvin
TRC_out = 182.9 + 273.15  # Convert to Kelvin
PT_in = 25.0  # MPa
PT_out = 8.63  # MPa
PC_in = 8.57  # MPa
PC_out = 25.03  # MPa
PRC_in = 8.58  # MPa
PRC_out = 25.02  # MPa
msco2 = 64.58  # kg/s
split_ratio = 0.32
eff_main_compressor = 0.85
eff_recompressor = 0.85
eff_turbine = 0.897
eff_sCO2_cycle = 0.486

# Define the fluid
fluid = 'CO2'

# Calculate properties at different states using CoolProp
def get_properties(T, P):
    h = CP.PropsSI('H', 'T', T, 'P', P * 1e6, fluid)
    s = CP.PropsSI('S', 'T', T, 'P', P * 1e6, fluid)
    return h, s

# State points
states = {}

# Turbine Inlet
states['TT_in'] = {'T': TT_in, 'P': PT_in}
states['TT_in']['h'], states['TT_in']['s'] = get_properties(TT_in, PT_in)

# Turbine Outlet
states['TT_out'] = {'T': TT_out, 'P': PT_out}
states['TT_out']['h'], states['TT_out']['s'] = get_properties(TT_out, PT_out)

# High Temperature Recuperator Outlet (Hot Side)
states['HTR_hot_out'] = {'T': states['TT_out']['T'], 'P': states['TT_out']['P']}
states['HTR_hot_out']['h'], states['HTR_hot_out']['s'] = get_properties(states['HTR_hot_out']['T'], states['HTR_hot_out']['P'])

# Low Temperature Recuperator Outlet (Hot Side)
states['LTR_hot_out'] = {'T': states['HTR_hot_out']['T'], 'P': states['HTR_hot_out']['P']}
states['LTR_hot_out']['h'], states['LTR_hot_out']['s'] = get_properties(states['LTR_hot_out']['T'], states['LTR_hot_out']['P'])

# Precooler Outlet
states['Precooler_out'] = {'T': TC_in, 'P': PC_in}
states['Precooler_out']['h'], states['Precooler_out']['s'] = get_properties(TC_in, PC_in)

# Main Compressor Inlet
states['TC_in'] = {'T': TC_in, 'P': PC_in}
states['TC_in']['h'], states['TC_in']['s'] = get_properties(TC_in, PC_in)

# Main Compressor Outlet
states['TC_out'] = {'T': TC_out, 'P': PC_out}
states['TC_out']['h'], states['TC_out']['s'] = get_properties(TC_out, PC_out)

# Recompressor Inlet
states['TRC_in'] = {'T': TRC_in, 'P': PRC_in}
states['TRC_in']['h'], states['TRC_in']['s'] = get_properties(TRC_in, PRC_in)

# Recompressor Outlet
states['TRC_out'] = {'T': TRC_out, 'P': PRC_out}
states['TRC_out']['h'], states['TRC_out']['s'] = get_properties(TRC_out, PRC_out)

# High Temperature Recuperator Inlet (Cold Side)
states['HTR_cold_in'] = {'T': TRC_out, 'P': PRC_out}
states['HTR_cold_in']['h'], states['HTR_cold_in']['s'] = get_properties(TRC_out, PRC_out)

# Low Temperature Recuperator Inlet (Cold Side)
states['LTR_cold_in'] = {'T': TC_out, 'P': PC_out}
states['LTR_cold_in']['h'], states['LTR_cold_in']['s'] = get_properties(TC_out, PC_out)

# Heater Outlet
states['Heater_out'] = {'T': TT_in, 'P': PT_in}
states['Heater_out']['h'], states['Heater_out']['s'] = get_properties(TT_in, PT_in)

# Calculate mass flow rates in the bypass valves
m_recompressor = msco2 * split_ratio
m_main = msco2 * (1 - split_ratio)

# Calculate work done by turbine
work_turbine = msco2 * (states['TT_in']['h'] - states['TT_out']['h']) * eff_turbine

# Calculate work done by main compressor
work_main_compressor = m_main * (states['TC_out']['h'] - states['TC_in']['h']) / eff_main_compressor

# Calculate work done by recompressor
work_recompressor = m_recompressor * (states['TRC_out']['h'] - states['TRC_in']['h']) / eff_recompressor

# Net work done by the cycle
net_work_cycle = work_turbine - (work_main_compressor + work_recompressor)

# Efficiency of the cycle
thermal_efficiency = net_work_cycle / (heat_power * 1e6)

# Output results
print(f"{'Component':<25} {'T (K)':<15} {'P (MPa)':<15} {'h (J/kg)':<15} {'s (J/kg·K)':<15}")
for key, state in states.items():
    print(f"{key:<25} {state['T']:<15.2f} {state['P']:<15.2f} {state['h']:<15.2f} {state['s']:<15.2f}")

print(f"\nWork done by turbine: {work_turbine / 1e6} MW")
print(f"Work done by main compressor: {work_main_compressor / 1e6} MW")
print(f"Work done by recompressor: {work_recompressor / 1e6} MW")
print(f"Net work done by the cycle: {net_work_cycle / 1e6} MW")
print(f"Thermal efficiency of the cycle: {thermal_efficiency * 100:.2f}%")

import matplotlib.pyplot as plt

# Define the state points with corresponding T and S values for outputs
state_points_output = {
    'Heater_out': {'T': 923.15, 'S': 2837.79},
    'Turbine_out': {'T': 787.55, 'S': 2860.95},
    'HTR_hot_out': {'T': 787.55, 'S': 2860.95},
    'LTR_hot_out': {'T': 787.55, 'S': 2860.95},
    'Precooler_out': {'T': 308.15, 'S': 1343.98},
    'Main_Compressor_out': {'T': 342.15, 'S': 1356.59},
    'Recompressor_out': {'T': 456.05, 'S': 1923.15},
    'HTR_cold_in': {'T': 456.05, 'S': 1923.15},
    'LTR_cold_in': {'T': 342.15, 'S': 1356.59}
}

# Extract T and S values for output points
T_output = [state['T'] for state in state_points_output.values()]
S_output = [state['S'] for state in state_points_output.values()]
labels_output = list(state_points_output.keys())

# Plot the TS diagram
plt.figure(figsize=(12, 8))
plt.plot(S_output, T_output, marker='o', linestyle='-')

# Annotate the components with output labels, ensuring no overlap
annotations = {
    'Heater_out': (2700, 1000),
    'Turbine_out': (2950, 800),
    'HTR_hot_out': (2500, 750),
    'LTR_hot_out': (2500, 700),
    'Precooler_out': (1200, 400),
    'Main_Compressor_out': (1500, 450),
    'Recompressor_out': (2050, 550),
    'HTR_cold_in': (2050, 500),
    'LTR_cold_in': (1400, 300)
}

for label, (x, y) in annotations.items():
    plt.annotate(label.replace('_', ' '), xy=(state_points_output[label]['S'], state_points_output[label]['T']),
                 xytext=(x, y), arrowprops=dict(facecolor='black', shrink=0.05))

plt.title('TS Diagram for sCO2 Brayton Cycle (Output Parameters)')
plt.xlabel('Entropy (S) [J/kg·K]')
plt.ylabel('Temperature (T) [K]')
plt.grid(True)
plt.show()

# Iterations

import CoolProp.CoolProp as CP
import matplotlib.pyplot as plt

# Define the parameters
heat_power = 18  # MWt
TT_in = 650 + 273.15  # Convert to Kelvin
TT_out = 514.4 + 273.15  # Convert to Kelvin
TC_in = 35 + 273.15  # Convert to Kelvin
TC_out = 69 + 273.15  # Convert to Kelvin
Twater_in = 20 + 273.15  # Convert to Kelvin
TRC_in = 206.9 + 273.15  # Convert to Kelvin
TRC_out = 182.9 + 273.15  # Convert to Kelvin
PT_in = 25.0  # MPa
PT_out = 8.63  # MPa
PC_in = 8.57  # MPa
PC_out = 25.03  # MPa
PRC_in = 8.58  # MPa
PRC_out = 25.02  # MPa
msco2 = 64.58  # kg/s
split_ratio = 0.32
eff_main_compressor = 0.85
eff_recompressor = 0.85
eff_turbine = 0.897
eff_sCO2_cycle = 0.486

# Function to calculate properties at different states using CoolProp
def get_properties(T, P, fluid):
    h = CP.PropsSI('H', 'T', T, 'P', P * 1e6, fluid)
    s = CP.PropsSI('S', 'T', T, 'P', P * 1e6, fluid)
    return h, s

# Coolants to be tested
coolants = ['CO2', 'Helium', 'Nitrogen', 'Argon', 'Neon', 'Hydrogen', 'Krypton', 'Xenon']

# Store results for comparison
results = {}

for coolant in coolants:
    # Define the fluid
    fluid = coolant

    # State points
    states = {}

    # Heater Outlet
    states['Heater_out'] = {'T': TT_in, 'P': PT_in}
    states['Heater_out']['h'], states['Heater_out']['s'] = get_properties(TT_in, PT_in, fluid)

    # Turbine Inlet (same as Heater Outlet)
    states['TT_in'] = states['Heater_out']

    # Turbine Outlet
    states['TT_out'] = {'T': TT_out, 'P': PT_out}
    states['TT_out']['h'], states['TT_out']['s'] = get_properties(TT_out, PT_out, fluid)

    # High Temperature Recuperator Outlet (Hot Side)
    states['HTR_hot_out'] = {'T': states['TT_out']['T'], 'P': states['TT_out']['P']}
    states['HTR_hot_out']['h'], states['HTR_hot_out']['s'] = get_properties(states['HTR_hot_out']['T'], states['HTR_hot_out']['P'], fluid)

    # Low Temperature Recuperator Outlet (Hot Side)
    states['LTR_hot_out'] = {'T': states['HTR_hot_out']['T'], 'P': states['HTR_hot_out']['P']}
    states['LTR_hot_out']['h'], states['LTR_hot_out']['s'] = get_properties(states['LTR_hot_out']['T'], states['LTR_hot_out']['P'], fluid)

    # Precooler Outlet
    states['Precooler_out'] = {'T': TC_in, 'P': PC_in}
    states['Precooler_out']['h'], states['Precooler_out']['s'] = get_properties(TC_in, PC_in, fluid)

    # Main Compressor Inlet
    states['TC_in'] = states['Precooler_out']

    # Main Compressor Outlet
    states['TC_out'] = {'T': TC_out, 'P': PC_out}
    states['TC_out']['h'], states['TC_out']['s'] = get_properties(TC_out, PC_out, fluid)

    # Recompressor Inlet
    states['TRC_in'] = {'T': TRC_in, 'P': PRC_in}
    states['TRC_in']['h'], states['TRC_in']['s'] = get_properties(TRC_in, PRC_in, fluid)

    # Recompressor Outlet
    states['TRC_out'] = {'T': TRC_out, 'P': PRC_out}
    states['TRC_out']['h'], states['TRC_out']['s'] = get_properties(TRC_out, PRC_out, fluid)

    # High Temperature Recuperator Inlet (Cold Side)
    states['HTR_cold_in'] = states['TRC_out']

    # Low Temperature Recuperator Inlet (Cold Side)
    states['LTR_cold_in'] = states['TC_out']

    # Calculate mass flow rates in the bypass valves
    m_recompressor = msco2 * split_ratio
    m_main = msco2 * (1 - split_ratio)

    # Calculate work done by turbine
    work_turbine = msco2 * (states['TT_in']['h'] - states['TT_out']['h']) * eff_turbine

    # Calculate work done by main compressor
    work_main_compressor = m_main * (states['TC_out']['h'] - states['TC_in']['h']) / eff_main_compressor

    # Calculate work done by recompressor
    work_recompressor = m_recompressor * (states['TRC_out']['h'] - states['TRC_in']['h']) / eff_recompressor

    # Net work done by the cycle
    net_work_cycle = work_turbine - (work_main_compressor + work_recompressor)

    # Efficiency of the cycle
    thermal_efficiency = net_work_cycle / (heat_power * 1e6)

    # Store results
    results[coolant] = {
        'states': states,
        'work_turbine': work_turbine,
        'work_main_compressor': work_main_compressor,
        'work_recompressor': work_recompressor,
        'net_work_cycle': net_work_cycle,
        'thermal_efficiency': thermal_efficiency
    }

    # Output results
    print(f"Results for {coolant}:")
    print(f"{'Component':<25} {'T (K)':<15} {'P (MPa)':<15} {'h (J/kg)':<15} {'s (J/kg·K)':<15}")
    for key, state in states.items():
        print(f"{key:<25} {state['T']:<15.2f} {state['P']:<15.2f} {state['h']:<15.2f} {state['s']:<15.2f}")
    print(f"\nWork done by turbine: {work_turbine / 1e6} MW")
    print(f"Work done by main compressor: {work_main_compressor / 1e6} MW")
    print(f"Work done by recompressor: {work_recompressor / 1e6} MW")
    print(f"Net work done by the cycle: {net_work_cycle / 1e6} MW")
    print(f"Thermal efficiency of the cycle: {thermal_efficiency * 100:.2f}%\n")

# Plot the TS diagrams for comparison
plt.figure(figsize=(12, 8))

for coolant in coolants:
    states = results[coolant]['states']
    T_output = [state['T'] for state in states.values()]
    S_output = [state['s'] for state in states.values()]  # Ensure correct key 's'
    plt.plot(S_output, T_output, marker='o', linestyle='-', label=coolant)

# Add labels and legend
plt.title('TS Diagram for sCO2 Brayton Cycle (Different Coolants)')
plt.xlabel('Entropy (S) [J/kg·K]')
plt.ylabel('Temperature (T) [K]')
plt.legend()
plt.grid(True)
plt.show()

